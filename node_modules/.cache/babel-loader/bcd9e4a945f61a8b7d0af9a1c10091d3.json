{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction isContentEditable(element) {\n  if (typeof element.getAttribute !== 'function') {\n    return false;\n  }\n\n  return !!element.getAttribute('contenteditable');\n}\n\nfunction isInput(element) {\n  if (!element) {\n    return false;\n  }\n\n  var tagName = element.tagName;\n  var editable = isContentEditable(element);\n  return tagName === 'INPUT' || tagName === 'TEXTAREA' || editable;\n}\n\nfunction inIframe() {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\n\nvar BarcodeScanner = /*#__PURE__*/function (_React$Component) {\n  _inherits(BarcodeScanner, _React$Component);\n\n  var _super = _createSuper(BarcodeScanner);\n\n  function BarcodeScanner(props) {\n    var _this;\n\n    _classCallCheck(this, BarcodeScanner);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"initScannerDetection\", function () {\n      _this.firstCharTime = 0;\n      _this.stringWriting = '';\n      _this.scanButtonCounter = 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scannerDetectionTest\", function (s) {\n      var _this$props = _this.props,\n          minLength = _this$props.minLength,\n          avgTimeByChar = _this$props.avgTimeByChar,\n          onScanButtonLongPressed = _this$props.onScanButtonLongPressed,\n          scanButtonLongPressThreshold = _this$props.scanButtonLongPressThreshold,\n          onScan = _this$props.onScan,\n          onError = _this$props.onError; // If string is given, test it\n\n      if (s) {\n        _this.firstCharTime = 0;\n        _this.lastCharTime = 0;\n        _this.stringWriting = s;\n      }\n\n      if (!_this.scanButtonCounter) {\n        _this.scanButtonCounter = 1;\n      } // If all condition are good (length, time...), call the callback and re-initialize the plugin for next scanning\n      // Else, just re-initialize\n\n\n      if (_this.stringWriting.length >= minLength && _this.lastCharTime - _this.firstCharTime < _this.stringWriting.length * avgTimeByChar) {\n        if (onScanButtonLongPressed && _this.scanButtonCounter > scanButtonLongPressThreshold) onScanButtonLongPressed(_this.stringWriting, _this.scanButtonCounter);else if (onScan) onScan(_this.stringWriting, _this.scanButtonCounter);\n\n        _this.initScannerDetection();\n\n        return true;\n      }\n\n      var errorMsg = '';\n\n      if (_this.stringWriting.length < minLength) {\n        errorMsg = \"String length should be greater or equal \".concat(minLength);\n      } else {\n        if (_this.lastCharTime - _this.firstCharTime > _this.stringWriting.length * avgTimeByChar) {\n          errorMsg = \"Average key character time should be less or equal \".concat(avgTimeByChar, \"ms\");\n        }\n      }\n\n      if (onError) onError(_this.stringWriting, errorMsg);\n\n      _this.initScannerDetection();\n\n      return false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyPress\", function (e) {\n      var _this$props2 = _this.props,\n          onKeyDetect = _this$props2.onKeyDetect,\n          onReceive = _this$props2.onReceive,\n          scanButtonKeyCode = _this$props2.scanButtonKeyCode,\n          stopPropagation = _this$props2.stopPropagation,\n          preventDefault = _this$props2.preventDefault,\n          endChar = _this$props2.endChar,\n          startChar = _this$props2.startChar,\n          timeBeforeScanTest = _this$props2.timeBeforeScanTest;\n      var target = e.target;\n\n      if (target instanceof window.HTMLElement && isInput(target)) {\n        return;\n      } // If it's just the button of the scanner, ignore it and wait for the real input\n\n\n      if (scanButtonKeyCode && e.which === scanButtonKeyCode) {\n        _this.scanButtonCounter += 1; // Cancel default\n\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      } // Fire keyDetect event in any case!\n\n\n      if (onKeyDetect) onKeyDetect(e);\n      if (stopPropagation) e.stopImmediatePropagation();\n      if (preventDefault) e.preventDefault();\n\n      if (_this.firstCharTime && endChar.indexOf(e.which) !== -1) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        _this.callIsScanner = true;\n      } else if (!_this.firstCharTime && startChar.indexOf(e.which) !== -1) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        _this.callIsScanner = false;\n      } else {\n        if (typeof e.which !== 'undefined') {\n          _this.stringWriting += String.fromCharCode(e.which);\n        }\n\n        _this.callIsScanner = false;\n      }\n\n      if (!_this.firstCharTime) {\n        _this.firstCharTime = Date.now();\n      }\n\n      _this.lastCharTime = Date.now();\n      if (_this.testTimer) clearTimeout(_this.testTimer);\n\n      if (_this.callIsScanner) {\n        _this.scannerDetectionTest();\n\n        _this.testTimer = false;\n      } else {\n        _this.testTimer = setTimeout(_this.scannerDetectionTest, timeBeforeScanTest);\n      }\n\n      if (onReceive) onReceive(e);\n    });\n\n    _this.firstCharTime = 0;\n    _this.lastCharTime = 0;\n    _this.stringWriting = '';\n    _this.callIsScanner = false;\n    _this.testTimer = false;\n    _this.scanButtonCounter = 0;\n    return _this;\n  }\n\n  _createClass(BarcodeScanner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (inIframe) window.parent.document.addEventListener('keypress', this.handleKeyPress);\n      window.document.addEventListener('keypress', this.handleKeyPress);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (inIframe) window.parent.document.removeEventListener('keypress', this.handleKeyPress);\n      window.document.removeEventListener('keypress', this.handleKeyPress);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.testCode) this.scannerDetectionTest(this.props.testCode);\n      return null;\n    }\n  }]);\n\n  return BarcodeScanner;\n}(_react[\"default\"].Component);\n\nBarcodeScanner.propTypes = {\n  onScan: _propTypes[\"default\"].func,\n  // Callback after detection of a successfull scanning (scanned string in parameter)\n  onError: _propTypes[\"default\"].func,\n  // Callback after detection of a unsuccessfull scanning (scanned string in parameter)\n  onReceive: _propTypes[\"default\"].func,\n  // Callback after receiving and processing a char (scanned char in parameter)\n  onKeyDetect: _propTypes[\"default\"].func,\n  // Callback after detecting a keyDown (key char in parameter) - in contrast to onReceive, this fires for non-character keys like tab, arrows, etc. too!\n  timeBeforeScanTest: _propTypes[\"default\"].number,\n  // Wait duration (ms) after keypress event to check if scanning is finished\n  avgTimeByChar: _propTypes[\"default\"].number,\n  // Average time (ms) between 2 chars. Used to do difference between keyboard typing and scanning\n  minLength: _propTypes[\"default\"].number,\n  // Minimum length for a scanning\n  endChar: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].number),\n  // Chars to remove and means end of scanning\n  startChar: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].number),\n  // Chars to remove and means start of scanning\n  scanButtonKeyCode: _propTypes[\"default\"].number,\n  // Key code of the scanner hardware button (if the scanner button a acts as a key itself)\n  scanButtonLongPressThreshold: _propTypes[\"default\"].number,\n  // How many times the hardware button should issue a pressed event before a barcode is read to detect a longpress\n  onScanButtonLongPressed: _propTypes[\"default\"].func,\n  // Callback after detection of a successfull scan while the scan button was pressed and held down\n  stopPropagation: _propTypes[\"default\"].bool,\n  // Stop immediate propagation on keypress event\n  preventDefault: _propTypes[\"default\"].bool,\n  // Prevent default action on keypress event\n  testCode: _propTypes[\"default\"].string // Test string for simulating\n\n};\nBarcodeScanner.defaultProps = {\n  timeBeforeScanTest: 100,\n  avgTimeByChar: 30,\n  minLength: 6,\n  endChar: [9, 13],\n  startChar: [],\n  scanButtonLongPressThreshold: 3,\n  stopPropagation: false,\n  preventDefault: false\n};\nvar _default = BarcodeScanner;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}