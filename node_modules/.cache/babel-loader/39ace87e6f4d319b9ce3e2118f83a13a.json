{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _useConfig3 = require('./hooks/useConfig');\n\nvar _useConfig4 = _interopRequireDefault(_useConfig3);\n\nvar _star = require('./star');\n\nvar _star2 = _interopRequireDefault(_star);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar parentStyles = {\n  overflow: \"hidden\",\n  position: \"relative\"\n};\n\nfunction getHalfStarStyles(color, uniqueness) {\n  return '\\n    .react-stars-' + uniqueness + ':before {\\n      position: absolute;\\n      overflow: hidden;\\n      display: block;\\n      z-index: 1;\\n      top: 0; left: 0;\\n      width: 50%;\\n      content: attr(data-forhalf);\\n      color: ' + color + ';\\n  }';\n}\n\nfunction getHalfStarStyleForIcons(color) {\n  return '\\n          span.react-stars-half > * {\\n          color: ' + color + ';\\n      }';\n}\n\n;\n\nfunction ReactStars(props) {\n  var _useState = (0, _react.useState)(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      uniqueness = _useState2[0],\n      setUniqueness = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentValue = _useState4[0],\n      setCurrentValue = _useState4[1];\n\n  var _useState5 = (0, _react.useState)([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      stars = _useState6[0],\n      setStars = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isUsingIcons = _useState8[0],\n      setIsUsingIcons = _useState8[1];\n\n  var _useConfig = (0, _useConfig4.default)(props),\n      _useConfig2 = _slicedToArray(_useConfig, 2),\n      config = _useConfig2[0],\n      setConfig = _useConfig2[1];\n\n  var _useState9 = (0, _react.useState)(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      halfStarAt = _useState10[0],\n      setHalfStarAt = _useState10[1];\n\n  var _useState11 = (0, _react.useState)(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      halfStarHidden = _useState12[0],\n      setHalfStarHidden = _useState12[1];\n\n  var _useState13 = (0, _react.useState)(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      classNames = _useState14[0],\n      setClassNames = _useState14[1];\n\n  function iconsUsed(config) {\n    return !config.isHalf && config.emptyIcon && config.filledIcon || config.isHalf && config.emptyIcon && config.halfIcon && config.filledIcon;\n  }\n\n  function createUniqueness() {\n    setUniqueness((Math.random() + \"\").replace(\".\", \"\"));\n  }\n\n  (0, _react.useEffect)(function () {\n    addClassNames();\n    validateInitialValue(props.value, props.count);\n    setStars(getStars(props.value));\n    setConfig(props);\n    createUniqueness();\n    setIsUsingIcons(iconsUsed(props));\n    setHalfStarAt(Math.floor(props.value));\n    setHalfStarHidden(props.isHalf && props.value % 1 < 0.5);\n  }, []);\n\n  function validateInitialValue(value, count) {\n    if (value < 0 || value > count) {\n      setCurrentValue(0);\n    } else {\n      setCurrentValue(value);\n    }\n  }\n\n  function addClassNames() {\n    var reactStarsClass = 'react-stars';\n    setClassNames(props.classNames + (' ' + reactStarsClass));\n  }\n\n  function isDecimal(value) {\n    return value % 1 === 0;\n  }\n\n  function getRate() {\n    return config.isHalf ? Math.floor(currentValue) : Math.round(currentValue);\n  }\n\n  function getStars(activeCount) {\n    if (typeof activeCount === 'undefined') {\n      activeCount = getRate();\n    }\n\n    var stars = [];\n\n    for (var i = 0; i < config.count; i++) {\n      stars.push({\n        active: i <= activeCount - 1\n      });\n    }\n\n    return stars;\n  }\n\n  function mouseOver(event) {\n    if (!config.edit) return;\n    var index = Number(event.currentTarget.getAttribute('data-index'));\n\n    if (config.isHalf) {\n      var isAtHalf = moreThanHalf(event);\n      setHalfStarHidden(isAtHalf);\n      if (isAtHalf) index += 1;\n      setHalfStarAt(index);\n    } else {\n      index += 1;\n    }\n\n    updateStars(index);\n  }\n\n  function updateStars(index) {\n    var currentActive = stars.filter(function (x) {\n      return x.active;\n    });\n\n    if (index !== currentActive.length) {\n      setStars(getStars(index));\n    }\n  }\n\n  function moreThanHalf(event) {\n    var target = event.target;\n    var boundingClientRect = target.getBoundingClientRect();\n    var mouseAt = event.clientX - boundingClientRect.left;\n    mouseAt = Math.round(Math.abs(mouseAt));\n    return mouseAt > boundingClientRect.width / 2;\n  }\n\n  function mouseLeave() {\n    if (!config.edit) return;\n    updateHalfStarValues(currentValue);\n    setStars(getStars());\n  }\n\n  function updateHalfStarValues(value) {\n    if (config.isHalf) {\n      setHalfStarHidden(isDecimal(value));\n      setHalfStarAt(Math.floor(value));\n    }\n  }\n\n  function onClick(event) {\n    if (!config.edit) return;\n    var index = Number(event.currentTarget.getAttribute('data-index'));\n    var value = void 0;\n\n    if (config.isHalf) {\n      var isAtHalf = moreThanHalf(event);\n      setHalfStarHidden(isAtHalf);\n      if (isAtHalf) index += 1;\n      value = isAtHalf ? index : index + 0.5;\n      setHalfStarAt(index);\n    } else {\n      value = index = index + 1;\n    }\n\n    currentValueUpdated(value);\n  }\n\n  function renderHalfStarStyleElement() {\n    return _react2.default.createElement('style', {\n      dangerouslySetInnerHTML: {\n        __html: isUsingIcons ? getHalfStarStyleForIcons(config.activeColor) : getHalfStarStyles(config.activeColor, uniqueness)\n      }\n    });\n  }\n\n  function currentValueUpdated(value) {\n    if (value !== currentValue) {\n      setStars(getStars(value));\n      setCurrentValue(value);\n      props.onChange(value);\n    }\n  }\n\n  function handleKeyDown(event) {\n    if (!config.a11y && !config.edit) return;\n    var key = event.key;\n    var value = currentValue;\n    var keyNumber = Number(key); // e.g. \"1\" => 1, \"ArrowUp\" => NaN\n\n    if (keyNumber) {\n      if (Number.isInteger(keyNumber) && keyNumber > 0 && keyNumber <= config.count) {\n        value = keyNumber;\n      }\n    } else {\n      if ((key === \"ArrowUp\" || key === \"ArrowRight\") && value < config.count) {\n        event.preventDefault();\n        value += config.isHalf ? 0.5 : 1;\n      } else if ((key === \"ArrowDown\" || key === \"ArrowLeft\") && value > 0.5) {\n        event.preventDefault();\n        value -= config.isHalf ? 0.5 : 1;\n      }\n    }\n\n    updateHalfStarValues(value);\n    currentValueUpdated(value);\n  }\n\n  function renderStars() {\n    return stars.map(function (star, i) {\n      return _react2.default.createElement(_star2.default, {\n        key: i,\n        index: i,\n        active: star.active,\n        config: config,\n        onMouseOver: mouseOver,\n        onMouseLeave: mouseLeave,\n        onClick: onClick,\n        halfStarHidden: halfStarHidden,\n        halfStarAt: halfStarAt,\n        isUsingIcons: isUsingIcons,\n        uniqueness: uniqueness\n      });\n    });\n  }\n\n  return _react2.default.createElement('div', {\n    className: 'react-stars-wrapper-' + uniqueness,\n    style: {\n      display: 'flex'\n    }\n  }, _react2.default.createElement('div', {\n    tabIndex: config.a11y && config.edit ? 0 : null,\n    'aria-label': 'add rating by typing an integer from 0 to 5 or pressing arrow keys',\n    onKeyDown: handleKeyDown,\n    className: classNames,\n    style: parentStyles\n  }, config.isHalf && renderHalfStarStyleElement(), renderStars(), _react2.default.createElement('p', {\n    style: {\n      position: 'absolute',\n      left: '-200rem'\n    },\n    role: 'status'\n  }, currentValue)));\n}\n\nReactStars.propTypes = {\n  classNames: _propTypes2.default.string,\n  edit: _propTypes2.default.bool,\n  half: _propTypes2.default.bool,\n  value: _propTypes2.default.number,\n  count: _propTypes2.default.number,\n  char: _propTypes2.default.string,\n  size: _propTypes2.default.number,\n  color: _propTypes2.default.string,\n  activeColor: _propTypes2.default.string,\n  emptyIcon: _propTypes2.default.element,\n  halfIcon: _propTypes2.default.element,\n  filledIcon: _propTypes2.default.element,\n  a11y: _propTypes2.default.bool\n};\nReactStars.defaultProps = {\n  edit: true,\n  half: false,\n  value: 0,\n  count: 5,\n  char: 'â˜…',\n  size: 15,\n  color: 'gray',\n  activeColor: '#ffd700',\n  a11y: true,\n  onChange: function onChange() {}\n};\nexports.default = ReactStars;","map":null,"metadata":{},"sourceType":"script"}