{"ast":null,"code":"import * as requestFromServer from \"./customersCrud\";\nimport { customersSlice, callTypes } from \"./customersSlice\";\nvar actions = customersSlice.actions;\nexport var fetchCustomers = function fetchCustomers(queryParams) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.list\n    }));\n    return requestFromServer.findCustomers(queryParams).then(function (response) {\n      var _response$data = response.data,\n          totalCount = _response$data.totalCount,\n          entities = _response$data.entities;\n      dispatch(actions.customersFetched({\n        totalCount: totalCount,\n        entities: entities\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find customers\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.list\n      }));\n    });\n  };\n};\nexport var fetchCustomer = function fetchCustomer(id) {\n  return function (dispatch) {\n    if (!id) {\n      return dispatch(actions.customerFetched({\n        customerForEdit: undefined\n      }));\n    }\n\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.getCustomerById(id).then(function (response) {\n      var customer = response.data;\n      dispatch(actions.customerFetched({\n        customerForEdit: customer\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteCustomer = function deleteCustomer(id) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteCustomer(id).then(function (response) {\n      dispatch(actions.customerDeleted({\n        id: id\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var createCustomer = function createCustomer(customerForCreation) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.createCustomer(customerForCreation).then(function (response) {\n      var customer = response.data.customer;\n      dispatch(actions.customerCreated({\n        customer: customer\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't create customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateCustomer = function updateCustomer(customer) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateCustomer(customer).then(function () {\n      dispatch(actions.customerUpdated({\n        customer: customer\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateCustomersStatus = function updateCustomersStatus(ids, status) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateStatusForCustomers(ids, status).then(function () {\n      dispatch(actions.customersStatusUpdated({\n        ids: ids,\n        status: status\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update customers status\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteCustomers = function deleteCustomers(ids) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteCustomers(ids).then(function () {\n      dispatch(actions.customersDeleted({\n        ids: ids\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete customers\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};","map":{"version":3,"names":["requestFromServer","customersSlice","callTypes","actions","fetchCustomers","queryParams","dispatch","startCall","callType","list","findCustomers","then","response","data","totalCount","entities","customersFetched","catch","error","clientMessage","catchError","fetchCustomer","id","customerFetched","customerForEdit","undefined","action","getCustomerById","customer","deleteCustomer","customerDeleted","createCustomer","customerForCreation","customerCreated","updateCustomer","customerUpdated","updateCustomersStatus","ids","status","updateStatusForCustomers","customersStatusUpdated","deleteCustomers","customersDeleted"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/ECommerce/_redux/customers/customersActions.js"],"sourcesContent":["import * as requestFromServer from \"./customersCrud\";\r\nimport {customersSlice, callTypes} from \"./customersSlice\";\r\n\r\nconst {actions} = customersSlice;\r\n\r\nexport const fetchCustomers = queryParams => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  return requestFromServer\r\n    .findCustomers(queryParams)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.customersFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find customers\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchCustomer = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(actions.customerFetched({ customerForEdit: undefined }));\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getCustomerById(id)\r\n    .then(response => {\r\n      const customer = response.data;\r\n      dispatch(actions.customerFetched({ customerForEdit: customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteCustomer = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteCustomer(id)\r\n    .then(response => {\r\n      dispatch(actions.customerDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createCustomer = customerForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createCustomer(customerForCreation)\r\n    .then(response => {\r\n      const { customer } = response.data;\r\n      dispatch(actions.customerCreated({ customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateCustomer = customer => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateCustomer(customer)\r\n    .then(() => {\r\n      dispatch(actions.customerUpdated({ customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateCustomersStatus = (ids, status) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateStatusForCustomers(ids, status)\r\n    .then(() => {\r\n      dispatch(actions.customersStatusUpdated({ ids, status }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update customers status\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteCustomers = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteCustomers(ids)\r\n    .then(() => {\r\n      dispatch(actions.customersDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete customers\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}