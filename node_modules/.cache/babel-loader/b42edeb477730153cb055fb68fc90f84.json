{"ast":null,"code":"var _jsxFileName = \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/GoogleMaterialExamples/layout/GridListExamplesPage.js\";\n\n/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\nimport { GridList, GridListTile, ListSubheader, GridListTileBar, IconButton } from \"@material-ui/core\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\";\nvar tileData = [{\n  img: \"https://material-ui.com/static/images/grid-list/breakfast.jpg\",\n  title: \"Breakfast\",\n  author: \"jill111\",\n  cols: 2,\n  featured: true\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/burgers.jpg\",\n  title: \"Tasty burger\",\n  author: \"director90\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/camera.jpg\",\n  title: \"Camera\",\n  author: \"Danson67\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/morning.jpg\",\n  title: \"Morning\",\n  author: \"fancycrave1\",\n  featured: true\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/hats.jpg\",\n  title: \"Hats\",\n  author: \"Hans\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/honey.jpg\",\n  title: \"Honey\",\n  author: \"fancycravel\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/vegetables.jpg\",\n  title: \"Vegetables\",\n  author: \"jill111\",\n  cols: 2\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/plant.jpg\",\n  title: \"Water plant\",\n  author: \"BkrmadtyaKarki\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/mushroom.jpg\",\n  title: \"Mushrooms\",\n  author: \"PublicDomainPictures\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/olive.jpg\",\n  title: \"Olive oil\",\n  author: \"congerdesign\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/star.jpg\",\n  title: \"Sea star\",\n  cols: 2,\n  author: \"821292\"\n}, {\n  img: \"https://material-ui.com/static/images/grid-list/bike.jpg\",\n  title: \"Bike\",\n  author: \"danfador\"\n}];\nvar jsCode1 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport GridList from '@material-ui/core/GridList';\\nimport GridListTile from '@material-ui/core/GridListTile';\\nimport tileData from './tileData';\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    justifyContent: 'space-around',\\n    overflow: 'hidden',\\n    backgroundColor: theme.palette.background.paper,\\n  },\\n  gridList: {\\n    width: 500,\\n    height: 450,\\n  },\\n}));\\n\\n/**\\n * The example data is structured as follows:\\n *\\n * import image from 'path/to/image.jpg';\\n * [etc...]\\n *\\n * const tileData = [\\n *   {\\n *     img: image,\\n *     title: 'Image',\\n *     author: 'author',\\n *     cols: 2,\\n *   },\\n *   {\\n *     [etc...]\\n *   },\\n * ];\\n */\\nexport default function ImageGridList() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <GridList cellHeight={160} className={classes.gridList} cols={3}>\\n        {tileData.map(tile => (\\n          <GridListTile key={tile.img} cols={tile.cols || 1}>\\n            <img src={tile.img} alt={tile.title} />\\n          </GridListTile>\\n        ))}\\n      </GridList>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode2 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport GridList from '@material-ui/core/GridList';\\nimport GridListTile from '@material-ui/core/GridListTile';\\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\\nimport ListSubheader from '@material-ui/core/ListSubheader';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport InfoIcon from '@material-ui/icons/Info';\\nimport tileData from './tileData';\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    justifyContent: 'space-around',\\n    overflow: 'hidden',\\n    backgroundColor: theme.palette.background.paper,\\n  },\\n  gridList: {\\n    width: 500,\\n    height: 450,\\n  },\\n  icon: {\\n    color: 'rgba(255, 255, 255, 0.54)',\\n  },\\n}));\\n\\n/**\\n * The example data is structured as follows:\\n *\\n * import image from 'path/to/image.jpg';\\n * [etc...]\\n *\\n * const tileData = [\\n *   {\\n *     img: image,\\n *     title: 'Image',\\n *     author: 'author',\\n *   },\\n *   {\\n *     [etc...]\\n *   },\\n * ];\\n */\\nexport default function TitlebarGridList() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <GridList cellHeight={180} className={classes.gridList}>\\n        <GridListTile key=\\\"Subheader\\\" cols={2} style={{ height: 'auto' }}>\\n          <ListSubheader component=\\\"div\\\">December</ListSubheader>\\n        </GridListTile>\\n        {tileData.map(tile => (\\n          <GridListTile key={tile.img}>\\n            <img src={tile.img} alt={tile.title} />\\n            <GridListTileBar\\n              title={tile.title}\\n              subtitle={<span>by: {tile.author}</span>}\\n              actionIcon={\\n                <IconButton aria-label={`info about ${tile.title}`} className={classes.icon}>\\n                  <InfoIcon />\\n                </IconButton>\\n              }\\n            />\\n          </GridListTile>\\n        ))}\\n      </GridList>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode3 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport GridList from '@material-ui/core/GridList';\\nimport GridListTile from '@material-ui/core/GridListTile';\\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\\nimport tileData from './tileData';\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    justifyContent: 'space-around',\\n    overflow: 'hidden',\\n    backgroundColor: theme.palette.background.paper,\\n  },\\n  gridList: {\\n    flexWrap: 'nowrap',\\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\\n    transform: 'translateZ(0)',\\n  },\\n  title: {\\n    color: theme.palette.primary.light,\\n  },\\n  titleBar: {\\n    background:\\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\\n  },\\n}));\\n\\n/**\\n * The example data is structured as follows:\\n *\\n * import image from 'path/to/image.jpg';\\n * [etc...]\\n *\\n * const tileData = [\\n *   {\\n *     img: image,\\n *     title: 'Image',\\n *     author: 'author',\\n *   },\\n *   {\\n *     [etc...]\\n *   },\\n * ];\\n */\\nexport default function SingleLineGridList() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <GridList className={classes.gridList} cols={2.5}>\\n        {tileData.map(tile => (\\n          <GridListTile key={tile.img}>\\n            <img src={tile.img} alt={tile.title} />\\n            <GridListTileBar\\n              title={tile.title}\\n              classes={{\\n                root: classes.titleBar,\\n                title: classes.title,\\n              }}\\n              actionIcon={\\n                <IconButton aria-label={`star ${tile.title}`}>\\n                  <StarBorderIcon className={classes.title} />\\n                </IconButton>\\n              }\\n            />\\n          </GridListTile>\\n        ))}\\n      </GridList>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode4 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport GridList from '@material-ui/core/GridList';\\nimport GridListTile from '@material-ui/core/GridListTile';\\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\\nimport tileData from './tileData';\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    justifyContent: 'space-around',\\n    overflow: 'hidden',\\n    backgroundColor: theme.palette.background.paper,\\n  },\\n  gridList: {\\n    width: 500,\\n    height: 450,\\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\\n    transform: 'translateZ(0)',\\n  },\\n  titleBar: {\\n    background:\\n      'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\\n      'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\\n  },\\n  icon: {\\n    color: 'white',\\n  },\\n}));\\n\\n/**\\n * The example data is structured as follows:\\n *\\n * import image from 'path/to/image.jpg';\\n * [etc...]\\n *\\n * const tileData = [\\n *   {\\n *     img: image,\\n *     title: 'Image',\\n *     author: 'author',\\n *     featured: true,\\n *   },\\n *   {\\n *     [etc...]\\n *   },\\n * ];\\n */\\nexport default function AdvancedGridList() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <GridList cellHeight={200} spacing={1} className={classes.gridList}>\\n        {tileData.map(tile => (\\n          <GridListTile key={tile.img} cols={tile.featured ? 2 : 1} rows={tile.featured ? 2 : 1}>\\n            <img src={tile.img} alt={tile.title} />\\n            <GridListTileBar\\n              title={tile.title}\\n              titlePosition=\\\"top\\\"\\n              actionIcon={\\n                <IconButton aria-label={`star ${tile.title}`} className={classes.icon}>\\n                  <StarBorderIcon />\\n                </IconButton>\\n              }\\n              actionPosition=\\\"left\\\"\\n              className={classes.titleBar}\\n            />\\n          </GridListTile>\\n        ))}\\n      </GridList>\\n    </div>\\n  );\\n}\\n\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      overflow: \"hidden\",\n      backgroundColor: theme.palette.background.paper\n    },\n    gridList: {\n      width: 500,\n      height: 450\n    },\n    icon: {\n      color: \"rgba(255, 255, 255, 0.54)\"\n    }\n  };\n});\nvar useStyles3 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      overflow: \"hidden\",\n      backgroundColor: theme.palette.background.paper\n    },\n    gridList: {\n      flexWrap: \"nowrap\",\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: \"translateZ(0)\"\n    },\n    title: {\n      color: theme.palette.primary.light\n    },\n    titleBar: {\n      background: \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n    }\n  };\n});\nvar useStyles4 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      overflow: \"hidden\",\n      backgroundColor: theme.palette.background.paper\n    },\n    gridList: {\n      width: 1200,\n      height: 450,\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: \"translateZ(0)\"\n    },\n    titleBar: {\n      background: \"linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, \" + \"rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n    },\n    icon: {\n      color: \"white\"\n    }\n  };\n});\nexport default function GridListExamplesPage() {\n  var _this = this;\n\n  var classes = useStyles();\n  var classes3 = useStyles3();\n  var classes4 = useStyles4();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n    icon: \"flaticon-warning font-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 9\n    }\n  }, \"Grid lists display a collection of images in an organized grid.\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 9\n    }\n  }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"font-weight-bold\",\n    rel: \"noopener noreferrer\",\n    href: \"https://material-ui.com/components/grid-list/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode1,\n    beforeCodeTitle: \"Image-only grid list\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 13\n    }\n  }, \"A simple example of a scrollable image \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 54\n    }\n  }, \"GridList\"), \" .\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 160,\n    className: classes.gridList,\n    cols: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 15\n    }\n  }, tileData.map(function (tile) {\n    return /*#__PURE__*/React.createElement(GridListTile, {\n      key: tile.img,\n      cols: tile.cols || 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tile.img,\n      alt: tile.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 21\n      }\n    }));\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode2,\n    beforeCodeTitle: \"Grid list with titlebars\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 13\n    }\n  }, \"This example demonstrates the use of the\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 15\n    }\n  }, \"GridListTileBar\"), \" to add an overlay to each\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 15\n    }\n  }, \"GridListTile\"), \". The overlay can accommodate a\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 15\n    }\n  }, \"title\"), \", \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 35\n    }\n  }, \"subtitle\"), \" and secondary action - in this example an \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 34\n    }\n  }, \"IconButton\"), \".\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 180,\n    className: classes.gridList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(GridListTile, {\n    key: \"Subheader\",\n    cols: 2,\n    style: {\n      height: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListSubheader, {\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 19\n    }\n  }, \"December\")), tileData.map(function (tile) {\n    return /*#__PURE__*/React.createElement(GridListTile, {\n      key: tile.img,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tile.img,\n      alt: tile.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(GridListTileBar, {\n      title: tile.title,\n      subtitle: /*#__PURE__*/React.createElement(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 33\n        }\n      }, \"by: \", tile.author),\n      actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"info about \".concat(tile.title),\n        className: classes.icon,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"flaticon-information\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 27\n        }\n      })),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 21\n      }\n    }));\n  })))))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode3,\n    beforeCodeTitle: \"Single line Grid list\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 9\n    }\n  }, \"This example demonstrates a horizontal scrollable single-line grid list of images. Horizontally scrolling grid lists are discouraged because the scrolling interferes with typical reading patterns, affecting comprehension. One notable exception is a horizontally-scrolling, single-line grid list of images, such as a gallery.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes3.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    className: classes3.gridList,\n    cols: 2.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 11\n    }\n  }, tileData.map(function (tile) {\n    return /*#__PURE__*/React.createElement(GridListTile, {\n      key: tile.img,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tile.img,\n      alt: tile.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(GridListTileBar, {\n      title: tile.title,\n      classes: {\n        root: classes3.titleBar,\n        title: classes3.title\n      },\n      actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"star \".concat(tile.title),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"flaticon-star\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 23\n        }\n      })),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }\n    }));\n  })))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode4,\n    beforeCodeTitle: \"Advanced Grid list\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 9\n    }\n  }, \"This example demonstrates \\\"featured\\\" tiles, using the\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 11\n    }\n  }, \"rows\"), \" and \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 33\n    }\n  }, \"cols\"), \" props to adjust the size of the tile, and the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 29\n    }\n  }, \"padding\"), \" prop to adjust the spacing. The tiles have a customized titlebar, positioned at the top and with a custom gradient \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 27\n    }\n  }, \"titleBackground\"), \". The secondary action\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 11\n    }\n  }, \"IconButton\"), \" is positioned on the left.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes4.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 200,\n    spacing: 1,\n    className: classes4.gridList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 11\n    }\n  }, tileData.map(function (tile) {\n    return /*#__PURE__*/React.createElement(GridListTile, {\n      key: tile.img,\n      cols: tile.featured ? 2 : 1,\n      rows: tile.featured ? 2 : 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tile.img,\n      alt: tile.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(GridListTileBar, {\n      title: tile.title,\n      titlePosition: \"top\",\n      actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"star \".concat(tile.title),\n        className: classes4.icon,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(StarBorderIcon, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 23\n        }\n      })),\n      actionPosition: \"left\",\n      className: classes4.titleBar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 17\n      }\n    }));\n  })))));\n}","map":{"version":3,"names":["React","makeStyles","StarBorderIcon","GridList","GridListTile","ListSubheader","GridListTileBar","IconButton","Notice","KTCodeExample","tileData","img","title","author","cols","featured","jsCode1","jsCode2","jsCode3","jsCode4","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","useStyles3","transform","primary","light","titleBar","useStyles4","GridListExamplesPage","classes","classes3","classes4","map","tile"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/GoogleMaterialExamples/layout/GridListExamplesPage.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\r\nimport {\r\n  GridList,\r\n  GridListTile,\r\n  ListSubheader,\r\n  GridListTileBar,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\r\n\r\nconst tileData = [\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/breakfast.jpg\",\r\n    title: \"Breakfast\",\r\n    author: \"jill111\",\r\n    cols: 2,\r\n    featured: true\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/burgers.jpg\",\r\n    title: \"Tasty burger\",\r\n    author: \"director90\"\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/camera.jpg\",\r\n    title: \"Camera\",\r\n    author: \"Danson67\"\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/morning.jpg\",\r\n    title: \"Morning\",\r\n    author: \"fancycrave1\",\r\n    featured: true\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/hats.jpg\",\r\n    title: \"Hats\",\r\n    author: \"Hans\"\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/honey.jpg\",\r\n    title: \"Honey\",\r\n    author: \"fancycravel\"\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/vegetables.jpg\",\r\n    title: \"Vegetables\",\r\n    author: \"jill111\",\r\n    cols: 2\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/plant.jpg\",\r\n    title: \"Water plant\",\r\n    author: \"BkrmadtyaKarki\"\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/mushroom.jpg\",\r\n    title: \"Mushrooms\",\r\n    author: \"PublicDomainPictures\"\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/olive.jpg\",\r\n    title: \"Olive oil\",\r\n    author: \"congerdesign\"\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/star.jpg\",\r\n    title: \"Sea star\",\r\n    cols: 2,\r\n    author: \"821292\"\r\n  },\r\n  {\r\n    img: \"https://material-ui.com/static/images/grid-list/bike.jpg\",\r\n    title: \"Bike\",\r\n    author: \"danfador\"\r\n  }\r\n];\r\nconst jsCode1 = `\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport tileData from './tileData';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: 500,\r\n    height: 450,\r\n  },\r\n}));\r\n\r\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const tileData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *     cols: 2,\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\r\nexport default function ImageGridList() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList cellHeight={160} className={classes.gridList} cols={3}>\r\n        {tileData.map(tile => (\r\n          <GridListTile key={tile.img} cols={tile.cols || 1}>\r\n            <img src={tile.img} alt={tile.title} />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode2 = `\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport tileData from './tileData';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: 500,\r\n    height: 450,\r\n  },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.54)',\r\n  },\r\n}));\r\n\r\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const tileData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\r\nexport default function TitlebarGridList() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList cellHeight={180} className={classes.gridList}>\r\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n          <ListSubheader component=\"div\">December</ListSubheader>\r\n        </GridListTile>\r\n        {tileData.map(tile => (\r\n          <GridListTile key={tile.img}>\r\n            <img src={tile.img} alt={tile.title} />\r\n            <GridListTileBar\r\n              title={tile.title}\r\n              subtitle={<span>by: {tile.author}</span>}\r\n              actionIcon={\r\n                <IconButton aria-label={\\`info about \\${tile.title}\\`} className={classes.icon}>\r\n                  <InfoIcon />\r\n                </IconButton>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode3 = `\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport tileData from './tileData';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.light,\r\n  },\r\n  titleBar: {\r\n    background:\r\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n  },\r\n}));\r\n\r\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const tileData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\r\nexport default function SingleLineGridList() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList className={classes.gridList} cols={2.5}>\r\n        {tileData.map(tile => (\r\n          <GridListTile key={tile.img}>\r\n            <img src={tile.img} alt={tile.title} />\r\n            <GridListTileBar\r\n              title={tile.title}\r\n              classes={{\r\n                root: classes.titleBar,\r\n                title: classes.title,\r\n              }}\r\n              actionIcon={\r\n                <IconButton aria-label={\\`star \\${tile.title}\\`}>\r\n                  <StarBorderIcon className={classes.title} />\r\n                </IconButton>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode4 = `\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport tileData from './tileData';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: 500,\r\n    height: 450,\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n  },\r\n  titleBar: {\r\n    background:\r\n      'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\r\n      'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n  },\r\n  icon: {\r\n    color: 'white',\r\n  },\r\n}));\r\n\r\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const tileData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *     featured: true,\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\r\nexport default function AdvancedGridList() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList cellHeight={200} spacing={1} className={classes.gridList}>\r\n        {tileData.map(tile => (\r\n          <GridListTile key={tile.img} cols={tile.featured ? 2 : 1} rows={tile.featured ? 2 : 1}>\r\n            <img src={tile.img} alt={tile.title} />\r\n            <GridListTileBar\r\n              title={tile.title}\r\n              titlePosition=\"top\"\r\n              actionIcon={\r\n                <IconButton aria-label={\\`star \\${tile.title}\\`} className={classes.icon}>\r\n                  <StarBorderIcon />\r\n                </IconButton>\r\n              }\r\n              actionPosition=\"left\"\r\n              className={classes.titleBar}\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n`;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  gridList: {\r\n    width: 500,\r\n    height: 450\r\n  },\r\n  icon: {\r\n    color: \"rgba(255, 255, 255, 0.54)\"\r\n  }\r\n}));\r\n\r\nconst useStyles3 = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  gridList: {\r\n    flexWrap: \"nowrap\",\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: \"translateZ(0)\"\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.light\r\n  },\r\n  titleBar: {\r\n    background:\r\n      \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\r\n  }\r\n}));\r\n\r\nconst useStyles4 = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  gridList: {\r\n    width: 1200,\r\n    height: 450,\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: \"translateZ(0)\"\r\n  },\r\n  titleBar: {\r\n    background:\r\n      \"linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, \" +\r\n      \"rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\r\n  },\r\n  icon: {\r\n    color: \"white\"\r\n  }\r\n}));\r\n\r\nexport default function GridListExamplesPage() {\r\n  const classes = useStyles();\r\n  const classes3 = useStyles3();\r\n  const classes4 = useStyles4();\r\n\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning font-primary\">\r\n        <span>\r\n          Grid lists display a collection of images in an organized grid.\r\n        </span>{\" \"}\r\n        <span>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"font-weight-bold\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/grid-list/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </span>\r\n      </Notice>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode1}\r\n            beforeCodeTitle=\"Image-only grid list\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              A simple example of a scrollable image <code>GridList</code> .\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <div className={classes.root}>\r\n              <GridList cellHeight={160} className={classes.gridList} cols={3}>\r\n                {tileData.map(tile => (\r\n                  <GridListTile key={tile.img} cols={tile.cols || 1}>\r\n                    <img src={tile.img} alt={tile.title} />\r\n                  </GridListTile>\r\n                ))}\r\n              </GridList>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode2}\r\n            beforeCodeTitle=\"Grid list with titlebars\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              This example demonstrates the use of the{\" \"}\r\n              <code>GridListTileBar</code> to add an overlay to each{\" \"}\r\n              <code>GridListTile</code>. The overlay can accommodate a{\" \"}\r\n              <code>title</code>, <code>subtitle</code> and secondary action -\r\n              in this example an <code>IconButton</code>.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <div className={classes.root}>\r\n              <GridList cellHeight={180} className={classes.gridList}>\r\n                <GridListTile\r\n                  key=\"Subheader\"\r\n                  cols={2}\r\n                  style={{ height: \"auto\" }}\r\n                >\r\n                  <ListSubheader component=\"div\">December</ListSubheader>\r\n                </GridListTile>\r\n                {tileData.map(tile => (\r\n                  <GridListTile key={tile.img}>\r\n                    <img src={tile.img} alt={tile.title} />\r\n                    <GridListTileBar\r\n                      title={tile.title}\r\n                      subtitle={<span>by: {tile.author}</span>}\r\n                      actionIcon={\r\n                        <IconButton\r\n                          aria-label={`info about ${tile.title}`}\r\n                          className={classes.icon}\r\n                        >\r\n                          <i className=\"flaticon-information\"></i>\r\n                        </IconButton>\r\n                      }\r\n                    />\r\n                  </GridListTile>\r\n                ))}\r\n              </GridList>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n      </div>\r\n\r\n      <KTCodeExample\r\n        jsCode={jsCode3}\r\n        beforeCodeTitle=\"Single line Grid list\"\r\n        codeBlockHeight=\"400px\"\r\n      >\r\n        <span>\r\n          This example demonstrates a horizontal scrollable single-line grid\r\n          list of images. Horizontally scrolling grid lists are discouraged\r\n          because the scrolling interferes with typical reading patterns,\r\n          affecting comprehension. One notable exception is a\r\n          horizontally-scrolling, single-line grid list of images, such as a\r\n          gallery.\r\n        </span>\r\n        <div className=\"separator separator-dashed my-7\"></div>\r\n        <div className={classes3.root}>\r\n          <GridList className={classes3.gridList} cols={2.5}>\r\n            {tileData.map(tile => (\r\n              <GridListTile key={tile.img}>\r\n                <img src={tile.img} alt={tile.title} />\r\n                <GridListTileBar\r\n                  title={tile.title}\r\n                  classes={{\r\n                    root: classes3.titleBar,\r\n                    title: classes3.title\r\n                  }}\r\n                  actionIcon={\r\n                    <IconButton aria-label={`star ${tile.title}`}>\r\n                      <i className=\"flaticon-star\"></i>\r\n                    </IconButton>\r\n                  }\r\n                />\r\n              </GridListTile>\r\n            ))}\r\n          </GridList>\r\n        </div>\r\n      </KTCodeExample>\r\n      <KTCodeExample\r\n        jsCode={jsCode4}\r\n        beforeCodeTitle=\"Advanced Grid list\"\r\n        codeBlockHeight=\"400px\"\r\n      >\r\n        <span>\r\n          This example demonstrates \"featured\" tiles, using the{\" \"}\r\n          <code>rows</code> and <code>cols</code> props to adjust the size of\r\n          the tile, and the <code>padding</code> prop to adjust the spacing. The\r\n          tiles have a customized titlebar, positioned at the top and with a\r\n          custom gradient <code>titleBackground</code>. The secondary action{\" \"}\r\n          <code>IconButton</code> is positioned on the left.\r\n        </span>\r\n        <div className=\"separator separator-dashed my-7\"></div>\r\n        <div className={classes4.root}>\r\n          <GridList cellHeight={200} spacing={1} className={classes4.gridList}>\r\n            {tileData.map(tile => (\r\n              <GridListTile\r\n                key={tile.img}\r\n                cols={tile.featured ? 2 : 1}\r\n                rows={tile.featured ? 2 : 1}\r\n              >\r\n                <img src={tile.img} alt={tile.title} />\r\n                <GridListTileBar\r\n                  title={tile.title}\r\n                  titlePosition=\"top\"\r\n                  actionIcon={\r\n                    <IconButton\r\n                      aria-label={`star ${tile.title}`}\r\n                      className={classes4.icon}\r\n                    >\r\n                      <StarBorderIcon />\r\n                    </IconButton>\r\n                  }\r\n                  actionPosition=\"left\"\r\n                  className={classes4.titleBar}\r\n                />\r\n              </GridListTile>\r\n            ))}\r\n          </GridList>\r\n        </div>\r\n      </KTCodeExample>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SACEC,QADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,eAJF,EAKEC,UALF,QAMO,mBANP;AAOA,SAAQC,MAAR,EAAgBC,aAAhB,QAAoC,0CAApC;AAEA,IAAMC,QAAQ,GAAG,CACf;EACEC,GAAG,EAAE,+DADP;EAEEC,KAAK,EAAE,WAFT;EAGEC,MAAM,EAAE,SAHV;EAIEC,IAAI,EAAE,CAJR;EAKEC,QAAQ,EAAE;AALZ,CADe,EAQf;EACEJ,GAAG,EAAE,6DADP;EAEEC,KAAK,EAAE,cAFT;EAGEC,MAAM,EAAE;AAHV,CARe,EAaf;EACEF,GAAG,EAAE,4DADP;EAEEC,KAAK,EAAE,QAFT;EAGEC,MAAM,EAAE;AAHV,CAbe,EAkBf;EACEF,GAAG,EAAE,6DADP;EAEEC,KAAK,EAAE,SAFT;EAGEC,MAAM,EAAE,aAHV;EAIEE,QAAQ,EAAE;AAJZ,CAlBe,EAwBf;EACEJ,GAAG,EAAE,0DADP;EAEEC,KAAK,EAAE,MAFT;EAGEC,MAAM,EAAE;AAHV,CAxBe,EA6Bf;EACEF,GAAG,EAAE,2DADP;EAEEC,KAAK,EAAE,OAFT;EAGEC,MAAM,EAAE;AAHV,CA7Be,EAkCf;EACEF,GAAG,EAAE,gEADP;EAEEC,KAAK,EAAE,YAFT;EAGEC,MAAM,EAAE,SAHV;EAIEC,IAAI,EAAE;AAJR,CAlCe,EAwCf;EACEH,GAAG,EAAE,2DADP;EAEEC,KAAK,EAAE,aAFT;EAGEC,MAAM,EAAE;AAHV,CAxCe,EA6Cf;EACEF,GAAG,EAAE,8DADP;EAEEC,KAAK,EAAE,WAFT;EAGEC,MAAM,EAAE;AAHV,CA7Ce,EAkDf;EACEF,GAAG,EAAE,2DADP;EAEEC,KAAK,EAAE,WAFT;EAGEC,MAAM,EAAE;AAHV,CAlDe,EAuDf;EACEF,GAAG,EAAE,0DADP;EAEEC,KAAK,EAAE,UAFT;EAGEE,IAAI,EAAE,CAHR;EAIED,MAAM,EAAE;AAJV,CAvDe,EA6Df;EACEF,GAAG,EAAE,0DADP;EAEEC,KAAK,EAAE,MAFT;EAGEC,MAAM,EAAE;AAHV,CA7De,CAAjB;AAmEA,IAAMG,OAAO,ytCAAb;AAuDA,IAAMC,OAAO,+8DAAb;AAyEA,IAAMC,OAAO,kjEAAb;AA6EA,IAAMC,OAAO,mpEAAb;AAgFA,IAAMC,SAAS,GAAGnB,UAAU,CAAC,UAAAoB,KAAK;EAAA,OAAK;IACrCC,IAAI,EAAE;MACJC,OAAO,EAAE,MADL;MAEJC,QAAQ,EAAE,MAFN;MAGJC,cAAc,EAAE,cAHZ;MAIJC,QAAQ,EAAE,QAJN;MAKJC,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBC;IALtC,CAD+B;IAQrCC,QAAQ,EAAE;MACRC,KAAK,EAAE,GADC;MAERC,MAAM,EAAE;IAFA,CAR2B;IAYrCC,IAAI,EAAE;MACJC,KAAK,EAAE;IADH;EAZ+B,CAAL;AAAA,CAAN,CAA5B;AAiBA,IAAMC,UAAU,GAAGnC,UAAU,CAAC,UAAAoB,KAAK;EAAA,OAAK;IACtCC,IAAI,EAAE;MACJC,OAAO,EAAE,MADL;MAEJC,QAAQ,EAAE,MAFN;MAGJC,cAAc,EAAE,cAHZ;MAIJC,QAAQ,EAAE,QAJN;MAKJC,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBC;IALtC,CADgC;IAQtCC,QAAQ,EAAE;MACRP,QAAQ,EAAE,QADF;MAER;MACAa,SAAS,EAAE;IAHH,CAR4B;IAatCzB,KAAK,EAAE;MACLuB,KAAK,EAAEd,KAAK,CAACO,OAAN,CAAcU,OAAd,CAAsBC;IADxB,CAb+B;IAgBtCC,QAAQ,EAAE;MACRX,UAAU,EACR;IAFM;EAhB4B,CAAL;AAAA,CAAN,CAA7B;AAsBA,IAAMY,UAAU,GAAGxC,UAAU,CAAC,UAAAoB,KAAK;EAAA,OAAK;IACtCC,IAAI,EAAE;MACJC,OAAO,EAAE,MADL;MAEJC,QAAQ,EAAE,MAFN;MAGJC,cAAc,EAAE,cAHZ;MAIJC,QAAQ,EAAE,QAJN;MAKJC,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBC;IALtC,CADgC;IAQtCC,QAAQ,EAAE;MACRC,KAAK,EAAE,IADC;MAERC,MAAM,EAAE,GAFA;MAGR;MACAI,SAAS,EAAE;IAJH,CAR4B;IActCG,QAAQ,EAAE;MACRX,UAAU,EACR,oDACA;IAHM,CAd4B;IAmBtCK,IAAI,EAAE;MACJC,KAAK,EAAE;IADH;EAnBgC,CAAL;AAAA,CAAN,CAA7B;AAwBA,eAAe,SAASO,oBAAT,GAAgC;EAAA;;EAC7C,IAAMC,OAAO,GAAGvB,SAAS,EAAzB;EACA,IAAMwB,QAAQ,GAAGR,UAAU,EAA3B;EACA,IAAMS,QAAQ,GAAGJ,UAAU,EAA3B;EAEA,oBACE,uDACE,oBAAC,MAAD;IAAQ,IAAI,EAAC,+BAAb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qEADF,EAGU,GAHV,eAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,2DACuD,GADvD,eAEE;IACE,MAAM,EAAC,QADT;IAEE,SAAS,EAAC,kBAFZ;IAGE,GAAG,EAAC,qBAHN;IAIE,IAAI,EAAC,+CAJP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,2BAFF,CAJF,CADF,eAkBE;IAAK,SAAS,EAAC,KAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAK,SAAS,EAAC,UAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,aAAD;IACE,MAAM,EAAEzB,OADV;IAEE,eAAe,EAAC,sBAFlB;IAGE,eAAe,EAAC,OAHlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAKE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,2DACyC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cADzC,OALF,eAQE;IAAK,SAAS,EAAC,iCAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EARF,eASE;IAAK,SAAS,EAAE2B,OAAO,CAACrB,IAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,QAAD;IAAU,UAAU,EAAE,GAAtB;IAA2B,SAAS,EAAEqB,OAAO,CAACZ,QAA9C;IAAwD,IAAI,EAAE,CAA9D;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGrB,QAAQ,CAACoC,GAAT,CAAa,UAAAC,IAAI;IAAA,oBAChB,oBAAC,YAAD;MAAc,GAAG,EAAEA,IAAI,CAACpC,GAAxB;MAA6B,IAAI,EAAEoC,IAAI,CAACjC,IAAL,IAAa,CAAhD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MAAK,GAAG,EAAEiC,IAAI,CAACpC,GAAf;MAAoB,GAAG,EAAEoC,IAAI,CAACnC,KAA9B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADgB;EAAA,CAAjB,CADH,CADF,CATF,CADF,CADF,eAsBE;IAAK,SAAS,EAAC,UAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,aAAD;IACE,MAAM,EAAEK,OADV;IAEE,eAAe,EAAC,0BAFlB;IAGE,eAAe,EAAC,OAHlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAKE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,+CAC2C,GAD3C,eAEE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAFF,gCAEyD,GAFzD,eAGE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBAHF,qCAG2D,GAH3D,eAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,WAJF,qBAIsB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cAJtB,8DAKqB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBALrB,MALF,eAYE;IAAK,SAAS,EAAC,iCAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAZF,eAaE;IAAK,SAAS,EAAE0B,OAAO,CAACrB,IAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,QAAD;IAAU,UAAU,EAAE,GAAtB;IAA2B,SAAS,EAAEqB,OAAO,CAACZ,QAA9C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,YAAD;IACE,GAAG,EAAC,WADN;IAEE,IAAI,EAAE,CAFR;IAGE,KAAK,EAAE;MAAEE,MAAM,EAAE;IAAV,CAHT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAKE,oBAAC,aAAD;IAAe,SAAS,EAAC,KAAzB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cALF,CADF,EAQGvB,QAAQ,CAACoC,GAAT,CAAa,UAAAC,IAAI;IAAA,oBAChB,oBAAC,YAAD;MAAc,GAAG,EAAEA,IAAI,CAACpC,GAAxB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MAAK,GAAG,EAAEoC,IAAI,CAACpC,GAAf;MAAoB,GAAG,EAAEoC,IAAI,CAACnC,KAA9B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,eAEE,oBAAC,eAAD;MACE,KAAK,EAAEmC,IAAI,CAACnC,KADd;MAEE,QAAQ,eAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,WAAWmC,IAAI,CAAClC,MAAhB,CAFZ;MAGE,UAAU,eACR,oBAAC,UAAD;QACE,mCAA0BkC,IAAI,CAACnC,KAA/B,CADF;QAEE,SAAS,EAAE+B,OAAO,CAACT,IAFrB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBAIE;QAAG,SAAS,EAAC,sBAAb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAJF,CAJJ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAFF,CADgB;EAAA,CAAjB,CARH,CADF,CAbF,CADF,CAtBF,CAlBF,eAsFE,oBAAC,aAAD;IACE,MAAM,EAAEhB,OADV;IAEE,eAAe,EAAC,uBAFlB;IAGE,eAAe,EAAC,OAHlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAKE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,0UALF,eAaE;IAAK,SAAS,EAAC,iCAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAbF,eAcE;IAAK,SAAS,EAAE0B,QAAQ,CAACtB,IAAzB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,QAAD;IAAU,SAAS,EAAEsB,QAAQ,CAACb,QAA9B;IAAwC,IAAI,EAAE,GAA9C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGrB,QAAQ,CAACoC,GAAT,CAAa,UAAAC,IAAI;IAAA,oBAChB,oBAAC,YAAD;MAAc,GAAG,EAAEA,IAAI,CAACpC,GAAxB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MAAK,GAAG,EAAEoC,IAAI,CAACpC,GAAf;MAAoB,GAAG,EAAEoC,IAAI,CAACnC,KAA9B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,eAEE,oBAAC,eAAD;MACE,KAAK,EAAEmC,IAAI,CAACnC,KADd;MAEE,OAAO,EAAE;QACPU,IAAI,EAAEsB,QAAQ,CAACJ,QADR;QAEP5B,KAAK,EAAEgC,QAAQ,CAAChC;MAFT,CAFX;MAME,UAAU,eACR,oBAAC,UAAD;QAAY,6BAAoBmC,IAAI,CAACnC,KAAzB,CAAZ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE;QAAG,SAAS,EAAC,eAAb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF,CAPJ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAFF,CADgB;EAAA,CAAjB,CADH,CADF,CAdF,CAtFF,eA0HE,oBAAC,aAAD;IACE,MAAM,EAAEO,OADV;IAEE,eAAe,EAAC,oBAFlB;IAGE,eAAe,EAAC,OAHlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAKE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,8DACwD,GADxD,eAEE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,UAFF,wBAEwB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,UAFxB,kEAGoB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,aAHpB,uIAKkB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBALlB,4BAKqE,GALrE,eAME;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBANF,gCALF,eAaE;IAAK,SAAS,EAAC,iCAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAbF,eAcE;IAAK,SAAS,EAAE0B,QAAQ,CAACvB,IAAzB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,QAAD;IAAU,UAAU,EAAE,GAAtB;IAA2B,OAAO,EAAE,CAApC;IAAuC,SAAS,EAAEuB,QAAQ,CAACd,QAA3D;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGrB,QAAQ,CAACoC,GAAT,CAAa,UAAAC,IAAI;IAAA,oBAChB,oBAAC,YAAD;MACE,GAAG,EAAEA,IAAI,CAACpC,GADZ;MAEE,IAAI,EAAEoC,IAAI,CAAChC,QAAL,GAAgB,CAAhB,GAAoB,CAF5B;MAGE,IAAI,EAAEgC,IAAI,CAAChC,QAAL,GAAgB,CAAhB,GAAoB,CAH5B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAKE;MAAK,GAAG,EAAEgC,IAAI,CAACpC,GAAf;MAAoB,GAAG,EAAEoC,IAAI,CAACnC,KAA9B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EALF,eAME,oBAAC,eAAD;MACE,KAAK,EAAEmC,IAAI,CAACnC,KADd;MAEE,aAAa,EAAC,KAFhB;MAGE,UAAU,eACR,oBAAC,UAAD;QACE,6BAAoBmC,IAAI,CAACnC,KAAzB,CADF;QAEE,SAAS,EAAEiC,QAAQ,CAACX,IAFtB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBAIE,oBAAC,cAAD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAJF,CAJJ;MAWE,cAAc,EAAC,MAXjB;MAYE,SAAS,EAAEW,QAAQ,CAACL,QAZtB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EANF,CADgB;EAAA,CAAjB,CADH,CADF,CAdF,CA1HF,CADF;AAuKD"},"metadata":{},"sourceType":"module"}