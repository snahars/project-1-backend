{"ast":null,"code":"import _toConsumableArray from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/GoogleMaterialExamples/utils/UseMediaQueryExamplesPage.js\";\n\n/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport json2mq from \"json2mq\";\nimport useMediaQueryTheme from \"@material-ui/core/useMediaQuery\";\nimport mediaQuery from \"css-mediaquery\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\"; // Example 4\n\nfunction MyComponent4() {\n  var matches = useMediaQueryTheme(\"@media (min-width:600px)\");\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }\n  }, \"@media (min-width:600px) matches: \".concat(matches));\n} // Example 5\n\n\nfunction useWidth5() {\n  var theme5 = useTheme();\n\n  var keys5 = _toConsumableArray(theme5.breakpoints.keys).reverse();\n\n  return keys5.reduce(function (output, key) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var matches = useMediaQuery(theme5.breakpoints.only(key));\n    return !output && matches ? key : output;\n  }, null) || \"xs\";\n}\n\nfunction MyComponent5() {\n  var width5 = useWidth5();\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 10\n    }\n  }, \"width: \".concat(width5));\n}\n\nvar theme5 = createMuiTheme();\nexport default function UseMediaQueryExamplesPage() {\n  // Example 1\n  var matches1 = useMediaQuery(\"(min-width:600px)\"); // Example 2\n\n  var theme2 = useTheme();\n  var matches2 = useMediaQuery(theme2.breakpoints.up(\"sm\")); // Example 3\n\n  var matches3 = useMediaQuery(json2mq({\n    minWidth: 600\n  })); // Example 4\n\n  var ssrMatchMedia4 = function ssrMatchMedia4(query) {\n    return {\n      matches4: mediaQuery.match(query, {\n        // The estimated CSS width of the browser.\n        // For the sake of this demo, we are using a fixed value.\n        // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n        // or user-agent resolution.\n        width: 800\n      })\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n    icon: \"flaticon-warning font-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"font-weight-bold\",\n    rel: \"noopener noreferrer\",\n    href: \"https://material-ui.com/components/use-media-query/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode1,\n    beforeCodeTitle: \"Simple media query\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"You should provide a media query to the first argument of the hook. The media query string can by any valid CSS media query, e.g. \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 20\n    }\n  }, \"'print'\"), \".\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"(min-width:600px) matches: \".concat(matches1))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode3,\n    beforeCodeTitle: \"Using JavaScript syntax\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, \"json2mq\"), \" is used to generate media query string from a JavaScript object.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"{ minWidth: 600 } matches: \".concat(matches3))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode5,\n    beforeCodeTitle: \"Migrating from withWidth()\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"The \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 19\n    }\n  }, \"withWidth()\"), \" higher-order component injects the screen width of the page. You can reproduce the same behavior with a \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, \"useWidth\"), \" hook:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MyComponent5, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode2,\n    beforeCodeTitle: \"Using Material-UI's breakpoint helpers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"You can use Material-UI's \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 41\n    }\n  }, \"breakpoint helpers\"), \" as follows:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, \"theme.breakpoints.up('sm') matches: \".concat(matches2))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode4,\n    beforeCodeTitle: \"Server-side rendering\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, \"An implementation of matchMedia is required on the server, we recommend using css-mediaquery. We also encourage the usage of the\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, \"useMediaQueryTheme\"), \" version of the hook that fetches properties from the theme. This way, you can provide a\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, \"ssrMatchMedia\"), \" option once for all your React tree.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: {\n      props: {\n        MuiUseMediaQuery: {\n          ssrMatchMedia4: ssrMatchMedia4\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MyComponent4, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }))))));\n}\nvar jsCode1 = \"\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n\";\nvar jsCode2 = \"\\nimport React from 'react';\\nimport { createMuiTheme, useTheme } from '@material-ui/core/styles';\\nimport { ThemeProvider } from '@material-ui/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n\\nconst theme = createMuiTheme();\\n\\nexport default function ThemeHelper() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\";\nvar jsCode3 = \"\\nimport React from 'react';\\nimport json2mq from 'json2mq';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function JavaScriptMedia() {\\n  const matches = useMediaQuery(\\n    json2mq({\\n      minWidth: 600,\\n    }),\\n  );\\n\\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\\n}\\n\";\nvar jsCode4 = \"\\nimport React from 'react';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/styles';\\nimport useMediaQueryTheme from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQueryTheme('@media (min-width:600px)');\\n\\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\\n}\\n\\nexport default function ServerSide() {\\n  // Use https://github.com/ericf/css-mediaquery as ponyfill.\\n  const ssrMatchMedia = query => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      // For the sake of this demo, we are using a fixed value.\\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\\n      // or user-agent resolution.\\n      width: 800,\\n    }),\\n  });\\n\\n  return (\\n    <ThemeProvider theme={{ props: { MuiUseMediaQuery: { ssrMatchMedia } } }}>\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\";\nvar jsCode5 = \"\\n/**\\n * Be careful using this hook. It only works because the number of\\n * breakpoints in theme is static. It will break once you change the number of\\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\\n */\\nfunction useWidth() {\\n  const theme = useTheme();\\n  const keys = [...theme.breakpoints.keys].reverse();\\n  return (\\n    keys.reduce((output, key) => {\\n      // eslint-disable-next-line react-hooks/rules-of-hooks\\n      const matches = useMediaQuery(theme.breakpoints.only(key));\\n      return !output && matches ? key : output;\\n    }, null) || 'xs'\\n  );\\n}\\n\";","map":{"version":3,"names":["React","useMediaQuery","useTheme","json2mq","useMediaQueryTheme","mediaQuery","ThemeProvider","createMuiTheme","Notice","KTCodeExample","MyComponent4","matches","useWidth5","theme5","keys5","breakpoints","keys","reverse","reduce","output","key","only","MyComponent5","width5","UseMediaQueryExamplesPage","matches1","theme2","matches2","up","matches3","minWidth","ssrMatchMedia4","query","matches4","match","width","jsCode1","jsCode3","jsCode5","jsCode2","jsCode4","props","MuiUseMediaQuery"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/GoogleMaterialExamples/utils/UseMediaQueryExamplesPage.js"],"sourcesContent":["/* eslint-disable no-restricted-imports */\r\nimport React from \"react\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport {useTheme} from \"@material-ui/core/styles\";\r\nimport json2mq from \"json2mq\";\r\nimport useMediaQueryTheme from \"@material-ui/core/useMediaQuery\";\r\nimport mediaQuery from \"css-mediaquery\";\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport {createMuiTheme} from \"@material-ui/core/styles\";\r\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\r\n\r\n// Example 4\r\nfunction MyComponent4() {\r\n  const matches = useMediaQueryTheme(\"@media (min-width:600px)\");\r\n\r\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\r\n}\r\n\r\n// Example 5\r\nfunction useWidth5() {\r\n  const theme5 = useTheme();\r\n  const keys5 = [...theme5.breakpoints.keys].reverse();\r\n  return (\r\n    keys5.reduce((output, key) => {\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const matches = useMediaQuery(theme5.breakpoints.only(key));\r\n      return !output && matches ? key : output;\r\n    }, null) || \"xs\"\r\n  );\r\n}\r\n\r\nfunction MyComponent5() {\r\n  const width5 = useWidth5();\r\n  return <span>{`width: ${width5}`}</span>;\r\n}\r\n\r\nconst theme5 = createMuiTheme();\r\n\r\nexport default function UseMediaQueryExamplesPage() {\r\n  // Example 1\r\n  const matches1 = useMediaQuery(\"(min-width:600px)\");\r\n\r\n  // Example 2\r\n  const theme2 = useTheme();\r\n  const matches2 = useMediaQuery(theme2.breakpoints.up(\"sm\"));\r\n\r\n  // Example 3\r\n  const matches3 = useMediaQuery(\r\n    json2mq({\r\n      minWidth: 600\r\n    })\r\n  );\r\n\r\n  // Example 4\r\n  const ssrMatchMedia4 = query => ({\r\n    matches4: mediaQuery.match(query, {\r\n      // The estimated CSS width of the browser.\r\n      // For the sake of this demo, we are using a fixed value.\r\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\r\n      // or user-agent resolution.\r\n      width: 800\r\n    })\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning font-primary\">\r\n        <span>\r\n          This is a CSS media query hook for React. It listens for matches to a\r\n          CSS media query. It allows the rendering of components based on\r\n          whether the query matches or not.\r\n        </span>{\" \"}\r\n        <span>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"font-weight-bold\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/use-media-query/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </span>\r\n      </Notice>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample jsCode={jsCode1} beforeCodeTitle=\"Simple media query\">\r\n            <span>\r\n              You should provide a media query to the first argument of the\r\n              hook. The media query string can by any valid CSS media query,\r\n              e.g. <code>'print'</code>.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <span>{`(min-width:600px) matches: ${matches1}`}</span>\r\n          </KTCodeExample>\r\n\r\n          <KTCodeExample\r\n            jsCode={jsCode3}\r\n            beforeCodeTitle=\"Using JavaScript syntax\"\r\n          >\r\n            <span>\r\n              <code>json2mq</code> is used to generate media query string from a\r\n              JavaScript object.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <span>{`{ minWidth: 600 } matches: ${matches3}`}</span>\r\n          </KTCodeExample>\r\n\r\n          <KTCodeExample\r\n            jsCode={jsCode5}\r\n            beforeCodeTitle=\"Migrating from withWidth()\"\r\n          >\r\n            <span>\r\n              The <code>withWidth()</code> higher-order component injects the\r\n              screen width of the page. You can reproduce the same behavior with\r\n              a <code>useWidth</code> hook:\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <ThemeProvider theme={theme5}>\r\n              <MyComponent5 />\r\n            </ThemeProvider>\r\n          </KTCodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode2}\r\n            beforeCodeTitle=\"Using Material-UI's breakpoint helpers\"\r\n          >\r\n            <span>\r\n              You can use Material-UI's <code>breakpoint helpers</code> as\r\n              follows:\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <span>{`theme.breakpoints.up('sm') matches: ${matches2}`}</span>\r\n          </KTCodeExample>\r\n\r\n          <KTCodeExample\r\n            jsCode={jsCode4}\r\n            beforeCodeTitle=\"Server-side rendering\"\r\n          >\r\n            <span>\r\n              An implementation of matchMedia is required on the server, we\r\n              recommend using css-mediaquery. We also encourage the usage of the{\" \"}\r\n              <code>useMediaQueryTheme</code> version of the hook that fetches\r\n              properties from the theme. This way, you can provide a{\" \"}\r\n              <code>ssrMatchMedia</code> option once for all your React tree.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <ThemeProvider\r\n              theme={{ props: { MuiUseMediaQuery: { ssrMatchMedia4 } } }}\r\n            >\r\n              <MyComponent4 />\r\n            </ThemeProvider>\r\n          </KTCodeExample>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst jsCode1 = `\r\nimport React from 'react';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nexport default function SimpleMediaQuery() {\r\n  const matches = useMediaQuery('(min-width:600px)');\r\n\r\n  return <span>{\\`(min-width:600px) matches: \\${matches}\\`}</span>;\r\n}\r\n`;\r\nconst jsCode2 = `\r\nimport React from 'react';\r\nimport { createMuiTheme, useTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n  return <span>{\\`theme.breakpoints.up('sm') matches: \\${matches}\\`}</span>;\r\n}\r\n\r\nconst theme = createMuiTheme();\r\n\r\nexport default function ThemeHelper() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n`;\r\nconst jsCode3 = `\r\nimport React from 'react';\r\nimport json2mq from 'json2mq';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nexport default function JavaScriptMedia() {\r\n  const matches = useMediaQuery(\r\n    json2mq({\r\n      minWidth: 600,\r\n    }),\r\n  );\r\n\r\n  return <span>{\\`{ minWidth: 600 } matches: \\${matches}\\`}</span>;\r\n}\r\n`;\r\nconst jsCode4 = `\r\nimport React from 'react';\r\nimport mediaQuery from 'css-mediaquery';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport useMediaQueryTheme from '@material-ui/core/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const matches = useMediaQueryTheme('@media (min-width:600px)');\r\n\r\n  return <span>{\\`@media (min-width:600px) matches: \\${matches}\\`}</span>;\r\n}\r\n\r\nexport default function ServerSide() {\r\n  // Use https://github.com/ericf/css-mediaquery as ponyfill.\r\n  const ssrMatchMedia = query => ({\r\n    matches: mediaQuery.match(query, {\r\n      // The estimated CSS width of the browser.\r\n      // For the sake of this demo, we are using a fixed value.\r\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\r\n      // or user-agent resolution.\r\n      width: 800,\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={{ props: { MuiUseMediaQuery: { ssrMatchMedia } } }}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n`;\r\nconst jsCode5 = `\r\n/**\r\n * Be careful using this hook. It only works because the number of\r\n * breakpoints in theme is static. It will break once you change the number of\r\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\r\n */\r\nfunction useWidth() {\r\n  const theme = useTheme();\r\n  const keys = [...theme.breakpoints.keys].reverse();\r\n  return (\r\n    keys.reduce((output, key) => {\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const matches = useMediaQuery(theme.breakpoints.only(key));\r\n      return !output && matches ? key : output;\r\n    }, null) || 'xs'\r\n  );\r\n}\r\n`;\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAAQC,QAAR,QAAuB,0BAAvB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,SAAQC,aAAR,QAA4B,qBAA5B;AACA,SAAQC,cAAR,QAA6B,0BAA7B;AACA,SAAQC,MAAR,EAAgBC,aAAhB,QAAoC,0CAApC,C,CAEA;;AACA,SAASC,YAAT,GAAwB;EACtB,IAAMC,OAAO,GAAGP,kBAAkB,CAAC,0BAAD,CAAlC;EAEA,oBAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,+CAA4CO,OAA5C,EAAP;AACD,C,CAED;;;AACA,SAASC,SAAT,GAAqB;EACnB,IAAMC,MAAM,GAAGX,QAAQ,EAAvB;;EACA,IAAMY,KAAK,GAAG,mBAAID,MAAM,CAACE,WAAP,CAAmBC,IAAvB,EAA6BC,OAA7B,EAAd;;EACA,OACEH,KAAK,CAACI,MAAN,CAAa,UAACC,MAAD,EAASC,GAAT,EAAiB;IAC5B;IACA,IAAMT,OAAO,GAAGV,aAAa,CAACY,MAAM,CAACE,WAAP,CAAmBM,IAAnB,CAAwBD,GAAxB,CAAD,CAA7B;IACA,OAAO,CAACD,MAAD,IAAWR,OAAX,GAAqBS,GAArB,GAA2BD,MAAlC;EACD,CAJD,EAIG,IAJH,KAIY,IALd;AAOD;;AAED,SAASG,YAAT,GAAwB;EACtB,IAAMC,MAAM,GAAGX,SAAS,EAAxB;EACA,oBAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,oBAAiBW,MAAjB,EAAP;AACD;;AAED,IAAMV,MAAM,GAAGN,cAAc,EAA7B;AAEA,eAAe,SAASiB,yBAAT,GAAqC;EAClD;EACA,IAAMC,QAAQ,GAAGxB,aAAa,CAAC,mBAAD,CAA9B,CAFkD,CAIlD;;EACA,IAAMyB,MAAM,GAAGxB,QAAQ,EAAvB;EACA,IAAMyB,QAAQ,GAAG1B,aAAa,CAACyB,MAAM,CAACX,WAAP,CAAmBa,EAAnB,CAAsB,IAAtB,CAAD,CAA9B,CANkD,CAQlD;;EACA,IAAMC,QAAQ,GAAG5B,aAAa,CAC5BE,OAAO,CAAC;IACN2B,QAAQ,EAAE;EADJ,CAAD,CADqB,CAA9B,CATkD,CAelD;;EACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK;IAAA,OAAK;MAC/BC,QAAQ,EAAE5B,UAAU,CAAC6B,KAAX,CAAiBF,KAAjB,EAAwB;QAChC;QACA;QACA;QACA;QACAG,KAAK,EAAE;MALyB,CAAxB;IADqB,CAAL;EAAA,CAA5B;;EAUA,oBACE,uDACE,oBAAC,MAAD;IAAQ,IAAI,EAAC,+BAAb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,6KADF,EAKU,GALV,eAME;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,2DACuD,GADvD,eAEE;IACE,MAAM,EAAC,QADT;IAEE,SAAS,EAAC,kBAFZ;IAGE,GAAG,EAAC,qBAHN;IAIE,IAAI,EAAC,qDAJP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,2BAFF,CANF,CADF,eAoBE;IAAK,SAAS,EAAC,KAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAK,SAAS,EAAC,UAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,aAAD;IAAe,MAAM,EAAEC,OAAvB;IAAgC,eAAe,EAAC,oBAAhD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sJAGO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,aAHP,MADF,eAME;IAAK,SAAS,EAAC,iCAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EANF,eAOE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wCAAqCX,QAArC,EAPF,CADF,eAWE,oBAAC,aAAD;IACE,MAAM,EAAEY,OADV;IAEE,eAAe,EAAC,yBAFlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,aADF,sEAJF,eAQE;IAAK,SAAS,EAAC,iCAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EARF,eASE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wCAAqCR,QAArC,EATF,CAXF,eAuBE,oBAAC,aAAD;IACE,MAAM,EAAES,OADV;IAEE,eAAe,EAAC,4BAFlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wBACM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,iBADN,4HAGI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cAHJ,WAJF,eASE;IAAK,SAAS,EAAC,iCAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EATF,eAUE,oBAAC,aAAD;IAAe,KAAK,EAAEzB,MAAtB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,YAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,CAVF,CAvBF,CADF,eAuCE;IAAK,SAAS,EAAC,UAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,aAAD;IACE,MAAM,EAAE0B,OADV;IAEE,eAAe,EAAC,wCAFlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,8CAC4B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wBAD5B,iBAJF,eAQE;IAAK,SAAS,EAAC,iCAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EARF,eASE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,iDAA8CZ,QAA9C,EATF,CADF,eAaE,oBAAC,aAAD;IACE,MAAM,EAAEa,OADV;IAEE,eAAe,EAAC,uBAFlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uIAEqE,GAFrE,eAGE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wBAHF,8FAIyD,GAJzD,eAKE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,mBALF,0CAJF,eAWE;IAAK,SAAS,EAAC,iCAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAXF,eAYE,oBAAC,aAAD;IACE,KAAK,EAAE;MAAEC,KAAK,EAAE;QAAEC,gBAAgB,EAAE;UAAEX,cAAc,EAAdA;QAAF;MAApB;IAAT,CADT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAGE,oBAAC,YAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAHF,CAZF,CAbF,CAvCF,CApBF,CADF;AA+FD;AAED,IAAMK,OAAO,+QAAb;AAUA,IAAMG,OAAO,ulBAAb;AAuBA,IAAMF,OAAO,6UAAb;AAeA,IAAMG,OAAO,w9BAAb;AA+BA,IAAMF,OAAO,inBAAb"},"metadata":{},"sourceType":"module"}