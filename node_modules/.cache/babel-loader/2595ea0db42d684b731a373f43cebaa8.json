{"ast":null,"code":"import _toConsumableArray from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport customerTableMock from \"./customerTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockCustomer(mock) {\n  mock.onPost(\"api/customers\").reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        customer = _JSON$parse.customer;\n\n    var _customer$firstName = customer.firstName,\n        firstName = _customer$firstName === void 0 ? \"\" : _customer$firstName,\n        _customer$lastName = customer.lastName,\n        lastName = _customer$lastName === void 0 ? \"\" : _customer$lastName,\n        _customer$email = customer.email,\n        email = _customer$email === void 0 ? \"\" : _customer$email,\n        _customer$userName = customer.userName,\n        userName = _customer$userName === void 0 ? \"\" : _customer$userName,\n        _customer$gender = customer.gender,\n        gender = _customer$gender === void 0 ? \"Female\" : _customer$gender,\n        _customer$status = customer.status,\n        status = _customer$status === void 0 ? 0 : _customer$status,\n        _customer$dateOfBbirt = customer.dateOfBbirth,\n        dateOfBbirth = _customer$dateOfBbirt === void 0 ? \"01/01/2019\" : _customer$dateOfBbirt,\n        _customer$ipAddress = customer.ipAddress,\n        ipAddress = _customer$ipAddress === void 0 ? \"127.0.0.1\" : _customer$ipAddress,\n        _customer$type = customer.type,\n        type = _customer$type === void 0 ? 1 : _customer$type;\n    var id = generateUserId();\n    var newCustomer = {\n      id: id,\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      userName: userName,\n      gender: gender,\n      status: status,\n      dateOfBbirth: dateOfBbirth,\n      ipAddress: ipAddress,\n      type: type\n    };\n    customerTableMock.push(newCustomer);\n    return [200, {\n      customer: newCustomer\n    }];\n  });\n  mock.onPost(\"api/customers/find\").reply(function (config) {\n    var mockUtils = new MockUtils();\n\n    var _JSON$parse2 = JSON.parse(config.data),\n        queryParams = _JSON$parse2.queryParams;\n\n    var filterdCustomers = mockUtils.baseFilter(customerTableMock, queryParams);\n    return [200, filterdCustomers];\n  });\n  mock.onPost(\"api/customers/deleteCustomers\").reply(function (config) {\n    var _JSON$parse3 = JSON.parse(config.data),\n        ids = _JSON$parse3.ids;\n\n    ids.forEach(function (id) {\n      var index = customerTableMock.findIndex(function (el) {\n        return el.id === id;\n      });\n\n      if (index > -1) {\n        customerTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onPost(\"api/customers/updateStatusForCustomers\").reply(function (config) {\n    var _JSON$parse4 = JSON.parse(config.data),\n        ids = _JSON$parse4.ids,\n        status = _JSON$parse4.status;\n\n    customerTableMock.forEach(function (el) {\n      if (ids.findIndex(function (id) {\n        return id === el.id;\n      }) > -1) {\n        el.status = status;\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/customers\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    var customer = customerTableMock.find(function (el) {\n      return el.id === +id;\n    });\n\n    if (!customer) {\n      return [400];\n    }\n\n    return [200, customer];\n  });\n  mock.onPut(/api\\/customers\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n\n    var _JSON$parse5 = JSON.parse(config.data),\n        customer = _JSON$parse5.customer;\n\n    var index = customerTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n\n    if (!index) {\n      return [400];\n    }\n\n    customerTableMock[index] = _objectSpread({}, customer);\n    return [200];\n  });\n  mock.onDelete(/api\\/customers\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    var index = customerTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    customerTableMock.splice(index, 1);\n\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateUserId() {\n  var ids = customerTableMock.map(function (el) {\n    return el.id;\n  });\n  var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n  return maxId + 1;\n}","map":{"version":3,"names":["customerTableMock","MockUtils","mockCustomer","mock","onPost","reply","data","JSON","parse","customer","firstName","lastName","email","userName","gender","status","dateOfBbirth","ipAddress","type","id","generateUserId","newCustomer","push","config","mockUtils","queryParams","filterdCustomers","baseFilter","ids","forEach","index","findIndex","el","splice","onGet","url","match","find","onPut","onDelete","map","maxId","Math","max"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/ECommerce/__mocks__/mockCustomer.js"],"sourcesContent":["import customerTableMock from \"./customerTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\n\r\nexport default function mockCustomer(mock) {\r\n  mock.onPost(\"api/customers\").reply(({ data }) => {\r\n    const { customer } = JSON.parse(data);\r\n    const {\r\n      firstName = \"\",\r\n      lastName = \"\",\r\n      email = \"\",\r\n      userName = \"\",\r\n      gender = \"Female\",\r\n      status = 0,\r\n      dateOfBbirth = \"01/01/2019\",\r\n      ipAddress = \"127.0.0.1\",\r\n      type = 1\r\n    } = customer;\r\n\r\n    const id = generateUserId();\r\n    const newCustomer = {\r\n      id,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      userName,\r\n      gender,\r\n      status,\r\n      dateOfBbirth,\r\n      ipAddress,\r\n      type\r\n    };\r\n    customerTableMock.push(newCustomer);\r\n    return [200, { customer: newCustomer }];\r\n  });\r\n\r\n  mock.onPost(\"api/customers/find\").reply(config => {\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    const filterdCustomers = mockUtils.baseFilter(\r\n      customerTableMock,\r\n      queryParams\r\n    );\r\n    return [200, filterdCustomers];\r\n  });\r\n\r\n  mock.onPost(\"api/customers/deleteCustomers\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach(id => {\r\n      const index = customerTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        customerTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onPost(\"api/customers/updateStatusForCustomers\").reply(config => {\r\n    const { ids, status } = JSON.parse(config.data);\r\n    customerTableMock.forEach(el => {\r\n      if (ids.findIndex(id => id === el.id) > -1) {\r\n        el.status = status;\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/customers\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\r\n    const customer = customerTableMock.find(el => el.id === +id);\r\n    if (!customer) {\r\n      return [400];\r\n    }\r\n\r\n    return [200, customer];\r\n  });\r\n\r\n  mock.onPut(/api\\/customers\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\r\n    const { customer } = JSON.parse(config.data);\r\n    const index = customerTableMock.findIndex(el => el.id === +id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    customerTableMock[index] = { ...customer };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/customers\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\r\n    const index = customerTableMock.findIndex(el => el.id === +id);\r\n    customerTableMock.splice(index, 1);\r\n    if (!index === -1) {\r\n      return [400];\r\n    }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateUserId() {\r\n  const ids = customerTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}