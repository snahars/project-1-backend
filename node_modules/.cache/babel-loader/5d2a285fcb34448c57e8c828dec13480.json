{"ast":null,"code":"import _toConsumableArray from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { LOGIN_URL, ME_URL, REGISTER_URL, REQUEST_PASSWORD_URL } from \"../_redux/authCrud\";\nimport userTableMock from \"./userTableMock\";\nexport default function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        email = _JSON$parse.email,\n        password = _JSON$parse.password;\n\n    if (email && password) {\n      var user = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase() && x.password === password;\n      });\n\n      if (user) {\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [400];\n  });\n  mock.onPost(REGISTER_URL).reply(function (_ref2) {\n    var data = _ref2.data;\n\n    var _JSON$parse2 = JSON.parse(data),\n        email = _JSON$parse2.email,\n        fullname = _JSON$parse2.fullname,\n        username = _JSON$parse2.username,\n        password = _JSON$parse2.password;\n\n    if (email && fullname && username && password) {\n      var user = {\n        id: generateUserId(),\n        email: email,\n        fullname: fullname,\n        username: username,\n        password: password,\n        firstname: fullname,\n        lastname: \"Stark\",\n        roles: [2],\n        // Manager\n        authToken: \"auth-token-\" + Math.random(),\n        refreshToken: \"auth-token-\" + Math.random(),\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\"\n      };\n      userTableMock.push(user);\n      return [200, _objectSpread(_objectSpread({}, user), {}, {\n        password: undefined\n      })];\n    }\n\n    return [400];\n  });\n  mock.onPost(REQUEST_PASSWORD_URL).reply(function (_ref3) {\n    var data = _ref3.data;\n\n    var _JSON$parse3 = JSON.parse(data),\n        email = _JSON$parse3.email;\n\n    if (email) {\n      var user = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase();\n      });\n\n      if (user) {\n        user.password = undefined;\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [400];\n  });\n  mock.onGet(ME_URL).reply(function (_ref4) {\n    var Authorization = _ref4.headers.Authorization;\n    var authToken = Authorization && Authorization.startsWith(\"Bearer \") && Authorization.slice(\"Bearer \".length);\n\n    if (authToken) {\n      var user = userTableMock.find(function (x) {\n        return x.authToken === authToken;\n      });\n\n      if (user) {\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [401];\n  });\n\n  function generateUserId() {\n    var ids = userTableMock.map(function (el) {\n      return el.id;\n    });\n    var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n    return maxId + 1;\n  }\n}","map":{"version":3,"names":["LOGIN_URL","ME_URL","REGISTER_URL","REQUEST_PASSWORD_URL","userTableMock","mockAuth","mock","onPost","reply","data","JSON","parse","email","password","user","find","x","toLowerCase","undefined","fullname","username","id","generateUserId","firstname","lastname","roles","authToken","Math","random","refreshToken","pic","process","env","PUBLIC_URL","push","onGet","Authorization","headers","startsWith","slice","length","ids","map","el","maxId","max"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/Auth/__mocks__/mockAuth.js"],"sourcesContent":["import {\r\n  LOGIN_URL,\r\n  ME_URL,\r\n  REGISTER_URL,\r\n  REQUEST_PASSWORD_URL,\r\n} from \"../_redux/authCrud\";\r\nimport userTableMock from \"./userTableMock\";\r\n\r\nexport default function mockAuth(mock) {\r\n  mock.onPost(LOGIN_URL).reply(({ data }) => {\r\n    const { email, password } = JSON.parse(data);\r\n\r\n    if (email && password) {\r\n      const user = userTableMock.find(\r\n        (x) =>\r\n          x.email.toLowerCase() === email.toLowerCase() &&\r\n          x.password === password\r\n      );\r\n\r\n      if (user) {\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onPost(REGISTER_URL).reply(({ data }) => {\r\n    const { email, fullname, username, password } = JSON.parse(data);\r\n\r\n    if (email && fullname && username && password) {\r\n      const user = {\r\n        id: generateUserId(),\r\n        email,\r\n        fullname,\r\n        username,\r\n        password,\r\n        firstname: fullname,\r\n        lastname: \"Stark\",\r\n        roles: [2], // Manager\r\n        authToken: \"auth-token-\" + Math.random(),\r\n        refreshToken: \"auth-token-\" + Math.random(),\r\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\",\r\n      };\r\n\r\n      userTableMock.push(user);\r\n\r\n      return [200, { ...user, password: undefined }];\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({ data }) => {\r\n    const { email } = JSON.parse(data);\r\n\r\n    if (email) {\r\n      const user = userTableMock.find(\r\n        (x) => x.email.toLowerCase() === email.toLowerCase()\r\n      );\r\n\r\n      if (user) {\r\n        user.password = undefined;\r\n\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onGet(ME_URL).reply(({ headers: { Authorization } }) => {\r\n    const authToken =\r\n      Authorization &&\r\n      Authorization.startsWith(\"Bearer \") &&\r\n      Authorization.slice(\"Bearer \".length);\r\n\r\n    if (authToken) {\r\n      const user = userTableMock.find((x) => x.authToken === authToken);\r\n\r\n      if (user) {\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [401];\r\n  });\r\n\r\n  function generateUserId() {\r\n    const ids = userTableMock.map((el) => el.id);\r\n    const maxId = Math.max(...ids);\r\n    return maxId + 1;\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SACEA,SADF,EAEEC,MAFF,EAGEC,YAHF,EAIEC,oBAJF,QAKO,oBALP;AAMA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,eAAe,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EACrCA,IAAI,CAACC,MAAL,CAAYP,SAAZ,EAAuBQ,KAAvB,CAA6B,gBAAc;IAAA,IAAXC,IAAW,QAAXA,IAAW;;IACzC,kBAA4BC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAA5B;IAAA,IAAQG,KAAR,eAAQA,KAAR;IAAA,IAAeC,QAAf,eAAeA,QAAf;;IAEA,IAAID,KAAK,IAAIC,QAAb,EAAuB;MACrB,IAAMC,IAAI,GAAGV,aAAa,CAACW,IAAd,CACX,UAACC,CAAD;QAAA,OACEA,CAAC,CAACJ,KAAF,CAAQK,WAAR,OAA0BL,KAAK,CAACK,WAAN,EAA1B,IACAD,CAAC,CAACH,QAAF,KAAeA,QAFjB;MAAA,CADW,CAAb;;MAMA,IAAIC,IAAJ,EAAU;QACR,OAAO,CAAC,GAAD,kCAAWA,IAAX;UAAiBD,QAAQ,EAAEK;QAA3B,GAAP;MACD;IACF;;IAED,OAAO,CAAC,GAAD,CAAP;EACD,CAhBD;EAkBAZ,IAAI,CAACC,MAAL,CAAYL,YAAZ,EAA0BM,KAA1B,CAAgC,iBAAc;IAAA,IAAXC,IAAW,SAAXA,IAAW;;IAC5C,mBAAgDC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAhD;IAAA,IAAQG,KAAR,gBAAQA,KAAR;IAAA,IAAeO,QAAf,gBAAeA,QAAf;IAAA,IAAyBC,QAAzB,gBAAyBA,QAAzB;IAAA,IAAmCP,QAAnC,gBAAmCA,QAAnC;;IAEA,IAAID,KAAK,IAAIO,QAAT,IAAqBC,QAArB,IAAiCP,QAArC,EAA+C;MAC7C,IAAMC,IAAI,GAAG;QACXO,EAAE,EAAEC,cAAc,EADP;QAEXV,KAAK,EAALA,KAFW;QAGXO,QAAQ,EAARA,QAHW;QAIXC,QAAQ,EAARA,QAJW;QAKXP,QAAQ,EAARA,QALW;QAMXU,SAAS,EAAEJ,QANA;QAOXK,QAAQ,EAAE,OAPC;QAQXC,KAAK,EAAE,CAAC,CAAD,CARI;QAQC;QACZC,SAAS,EAAE,gBAAgBC,IAAI,CAACC,MAAL,EAThB;QAUXC,YAAY,EAAE,gBAAgBF,IAAI,CAACC,MAAL,EAVnB;QAWXE,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyB;MAXnB,CAAb;MAcA7B,aAAa,CAAC8B,IAAd,CAAmBpB,IAAnB;MAEA,OAAO,CAAC,GAAD,kCAAWA,IAAX;QAAiBD,QAAQ,EAAEK;MAA3B,GAAP;IACD;;IAED,OAAO,CAAC,GAAD,CAAP;EACD,CAxBD;EA0BAZ,IAAI,CAACC,MAAL,CAAYJ,oBAAZ,EAAkCK,KAAlC,CAAwC,iBAAc;IAAA,IAAXC,IAAW,SAAXA,IAAW;;IACpD,mBAAkBC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAlB;IAAA,IAAQG,KAAR,gBAAQA,KAAR;;IAEA,IAAIA,KAAJ,EAAW;MACT,IAAME,IAAI,GAAGV,aAAa,CAACW,IAAd,CACX,UAACC,CAAD;QAAA,OAAOA,CAAC,CAACJ,KAAF,CAAQK,WAAR,OAA0BL,KAAK,CAACK,WAAN,EAAjC;MAAA,CADW,CAAb;;MAIA,IAAIH,IAAJ,EAAU;QACRA,IAAI,CAACD,QAAL,GAAgBK,SAAhB;QAEA,OAAO,CAAC,GAAD,kCAAWJ,IAAX;UAAiBD,QAAQ,EAAEK;QAA3B,GAAP;MACD;IACF;;IAED,OAAO,CAAC,GAAD,CAAP;EACD,CAhBD;EAkBAZ,IAAI,CAAC6B,KAAL,CAAWlC,MAAX,EAAmBO,KAAnB,CAAyB,iBAAoC;IAAA,IAAtB4B,aAAsB,SAAjCC,OAAiC,CAAtBD,aAAsB;IAC3D,IAAMV,SAAS,GACbU,aAAa,IACbA,aAAa,CAACE,UAAd,CAAyB,SAAzB,CADA,IAEAF,aAAa,CAACG,KAAd,CAAoB,UAAUC,MAA9B,CAHF;;IAKA,IAAId,SAAJ,EAAe;MACb,IAAMZ,IAAI,GAAGV,aAAa,CAACW,IAAd,CAAmB,UAACC,CAAD;QAAA,OAAOA,CAAC,CAACU,SAAF,KAAgBA,SAAvB;MAAA,CAAnB,CAAb;;MAEA,IAAIZ,IAAJ,EAAU;QACR,OAAO,CAAC,GAAD,kCAAWA,IAAX;UAAiBD,QAAQ,EAAEK;QAA3B,GAAP;MACD;IACF;;IAED,OAAO,CAAC,GAAD,CAAP;EACD,CAfD;;EAiBA,SAASI,cAAT,GAA0B;IACxB,IAAMmB,GAAG,GAAGrC,aAAa,CAACsC,GAAd,CAAkB,UAACC,EAAD;MAAA,OAAQA,EAAE,CAACtB,EAAX;IAAA,CAAlB,CAAZ;IACA,IAAMuB,KAAK,GAAGjB,IAAI,CAACkB,GAAL,OAAAlB,IAAI,qBAAQc,GAAR,EAAlB;IACA,OAAOG,KAAK,GAAG,CAAf;EACD;AACF"},"metadata":{},"sourceType":"module"}