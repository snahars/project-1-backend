{"ast":null,"code":"import _defineProperty from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/GoogleMaterialExamples/inputs/CheckboxesExamplesPage.js\";\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport { Checkbox, FormControlLabel, FormControl, FormLabel, FormGroup, FormHelperText } from \"@material-ui/core\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\"; // Example 2\n\nvar GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(function (props) {\n  return /*#__PURE__*/React.createElement(Checkbox, Object.assign({\n    color: \"default\"\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }));\n});\nexport default function CheckboxesExamplesPage() {\n  var _React$useState = React.useState({\n    checkedA: true,\n    checkedB: true,\n    checkedF: true,\n    checkedG: true,\n    gilad: true,\n    jason: false,\n    antoine: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var handleChange = function handleChange(name) {\n    return function (event) {\n      setState(_objectSpread(_objectSpread({}, state), {}, _defineProperty({}, name, event.target.checked)));\n    };\n  }; // Example 3\n\n\n  var useStyles = makeStyles(function (theme) {\n    return {\n      root: {\n        display: \"flex\"\n      },\n      formControl: {\n        margin: theme.spacing(3)\n      }\n    };\n  });\n  var classes = useStyles();\n\n  var handleChange3 = function handleChange3(name) {\n    return function (event) {\n      setState(_objectSpread(_objectSpread({}, state), {}, _defineProperty({}, name, event.target.checked)));\n    };\n  };\n\n  var gilad = state.gilad,\n      jason = state.jason,\n      antoine = state.antoine;\n  var error = [gilad, jason, antoine].filter(function (v) {\n    return v;\n  }).length !== 2; // Example 4\n\n  var _React$useState3 = React.useState(\"female\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      value = _React$useState4[0],\n      setValue = _React$useState4[1];\n\n  function handleChange4(event) {\n    setValue(event.target.value);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n    icon: \"flaticon-warning font-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Checkboxes allow the user to select one or more items from a set.\"), \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Checkboxes\"), \" can be used to turn an option on or off.\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"font-weight-bold\",\n    rel: \"noopener noreferrer\",\n    href: \"https://material-ui.com/components/checkboxes/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode3,\n    beforeCodeTitle: \"Checkboxes\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"If you have multiple options appearing in a list, you can preserve space by using checkboxes instead of on/off switches. If you have a single option, avoid using a checkbox and use an on/off switch instead.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    checked: state.checkedA,\n    onChange: handleChange(\"checkedA\"),\n    value: \"checkedA\",\n    inputProps: {\n      \"aria-label\": \"primary checkbox\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    checked: state.checkedB,\n    onChange: handleChange(\"checkedB\"),\n    value: \"checkedB\",\n    color: \"primary\",\n    inputProps: {\n      \"aria-label\": \"secondary checkbox\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    value: \"checkedC\",\n    inputProps: {\n      \"aria-label\": \"uncontrolled-checkbox\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    disabled: true,\n    value: \"checkedD\",\n    inputProps: {\n      \"aria-label\": \"disabled checkbox\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    disabled: true,\n    checked: true,\n    value: \"checkedE\",\n    inputProps: {\n      \"aria-label\": \"disabled checked checkbox\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    checked: state.checkedF,\n    onChange: handleChange(\"checkedF\"),\n    value: \"checkedF\",\n    indeterminate: true,\n    inputProps: {\n      \"aria-label\": \"indeterminate checkbox\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    defaultChecked: true,\n    color: \"default\",\n    value: \"checkedG\",\n    inputProps: {\n      \"aria-label\": \"checkbox with default color\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode1,\n    beforeCodeTitle: \"Checkboxes with FormGroup\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, \"FormGroup\"), \" is a helpful wrapper used to group selection controls components that provides an easier API.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    component: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, \"Assign responsibility\"), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: gilad,\n      onChange: handleChange3(\"gilad\"),\n      value: \"gilad\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 23\n      }\n    }),\n    label: \"Gilad Gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: jason,\n      onChange: handleChange3(\"jason\"),\n      value: \"jason\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 23\n      }\n    }),\n    label: \"Jason Killian\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: antoine,\n      onChange: handleChange3(\"antoine\"),\n      value: \"antoine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 23\n      }\n    }),\n    label: \"Antoine Llorca\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, \"Be careful\")), /*#__PURE__*/React.createElement(FormControl, {\n    required: true,\n    error: error,\n    component: \"fieldset\",\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    component: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, \"Pick two\"), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: gilad,\n      onChange: handleChange3(\"gilad\"),\n      value: \"gilad\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 23\n      }\n    }),\n    label: \"Gilad Gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: jason,\n      onChange: handleChange3(\"jason\"),\n      value: \"jason\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 23\n      }\n    }),\n    label: \"Jason Killian\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: antoine,\n      onChange: handleChange3(\"antoine\"),\n      value: \"antoine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 23\n      }\n    }),\n    label: \"Antoine Lorca\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 17\n    }\n  }, \"You can display an error\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode4,\n    beforeCodeTitle: \"Form Control Label\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 15\n    }\n  }, \"Checkbox\"), \" can also be used with a label description thanks to the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 29\n    }\n  }, \"FormControlLabel\"), \" component.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: state.checkedA,\n      onChange: handleChange(\"checkedA\"),\n      value: \"checkedA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 19\n      }\n    }),\n    label: \"Secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: state.checkedB,\n      onChange: handleChange(\"checkedB\"),\n      value: \"checkedB\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 19\n      }\n    }),\n    label: \"Primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      value: \"checkedC\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 26\n      }\n    }),\n    label: \"Uncontrolled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    disabled: true,\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      value: \"checkedD\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 26\n      }\n    }),\n    label: \"Disabled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    disabled: true,\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 26\n      }\n    }),\n    label: \"Disabled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: state.checkedF,\n      onChange: handleChange(\"checkedF\"),\n      value: \"checkedF\",\n      indeterminate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 19\n      }\n    }),\n    label: \"Indeterminate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(GreenCheckbox, {\n      checked: state.checkedG,\n      onChange: handleChange(\"checkedG\"),\n      value: \"checkedG\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 19\n      }\n    }),\n    label: \"Custom color\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      icon: /*#__PURE__*/React.createElement(FavoriteBorder, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 27\n        }\n      }),\n      checkedIcon: /*#__PURE__*/React.createElement(Favorite, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 34\n        }\n      }),\n      value: \"checkedH\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 19\n      }\n    }),\n    label: \"Custom icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      icon: /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, {\n        fontSize: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 27\n        }\n      }),\n      checkedIcon: /*#__PURE__*/React.createElement(CheckBoxIcon, {\n        fontSize: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 34\n        }\n      }),\n      value: \"checkedI\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 19\n      }\n    }),\n    label: \"Custom size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode2,\n    beforeCodeTitle: \"Label placement\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }, \"You can change the placement of the label:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    component: \"fieldset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    component: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 15\n    }\n  }, \"labelPlacement\"), /*#__PURE__*/React.createElement(FormGroup, {\n    \"aria-label\": \"position\",\n    name: \"position\",\n    value: value,\n    onChange: handleChange,\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"top\",\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 28\n      }\n    }),\n    label: \"Top\",\n    labelPlacement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"start\",\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 28\n      }\n    }),\n    label: \"Start\",\n    labelPlacement: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"bottom\",\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 28\n      }\n    }),\n    label: \"Bottom\",\n    labelPlacement: \"bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"end\",\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 28\n      }\n    }),\n    label: \"End\",\n    labelPlacement: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 17\n    }\n  })))))));\n}\nvar jsCode1 = \"\\nimport React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport FormLabel from '@material-ui/core/FormLabel';\\nimport FormControl from '@material-ui/core/FormControl';\\nimport FormGroup from '@material-ui/core/FormGroup';\\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\\nimport FormHelperText from '@material-ui/core/FormHelperText';\\nimport Checkbox from '@material-ui/core/Checkbox';\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    display: 'flex',\\n  },\\n  formControl: {\\n    margin: theme.spacing(3),\\n  },\\n}));\\n\\nexport default function CheckboxesGroup() {\\n  const classes = useStyles();\\n  const [state, setState] = React.useState({\\n    gilad: true,\\n    jason: false,\\n    antoine: false,\\n  });\\n\\n  const handleChange = name => event => {\\n    setState({ ...state, [name]: event.target.checked });\\n  };\\n\\n  const { gilad, jason, antoine } = state;\\n  const error = [gilad, jason, antoine].filter(v => v).length !== 2;\\n\\n  return (\\n    <div className={classes.root}>\\n      <FormControl component=\\\"fieldset\\\" className={classes.formControl}>\\n        <FormLabel component=\\\"legend\\\">Assign responsibility</FormLabel>\\n        <FormGroup>\\n          <FormControlLabel\\n            control={<Checkbox checked={gilad} onChange={handleChange('gilad')} value=\\\"gilad\\\" />}\\n            label=\\\"Gilad Gray\\\"\\n          />\\n          <FormControlLabel\\n            control={<Checkbox checked={jason} onChange={handleChange('jason')} value=\\\"jason\\\" />}\\n            label=\\\"Jason Killian\\\"\\n          />\\n          <FormControlLabel\\n            control={\\n              <Checkbox checked={antoine} onChange={handleChange('antoine')} value=\\\"antoine\\\" />\\n            }\\n            label=\\\"Antoine Llorca\\\"\\n          />\\n        </FormGroup>\\n        <FormHelperText>Be careful</FormHelperText>\\n      </FormControl>\\n      <FormControl required error={error} component=\\\"fieldset\\\" className={classes.formControl}>\\n        <FormLabel component=\\\"legend\\\">Pick two</FormLabel>\\n        <FormGroup>\\n          <FormControlLabel\\n            control={<Checkbox checked={gilad} onChange={handleChange('gilad')} value=\\\"gilad\\\" />}\\n            label=\\\"Gilad Gray\\\"\\n          />\\n          <FormControlLabel\\n            control={<Checkbox checked={jason} onChange={handleChange('jason')} value=\\\"jason\\\" />}\\n            label=\\\"Jason Killian\\\"\\n          />\\n          <FormControlLabel\\n            control={\\n              <Checkbox checked={antoine} onChange={handleChange('antoine')} value=\\\"antoine\\\" />\\n            }\\n            label=\\\"Antoine Llorca\\\"\\n          />\\n        </FormGroup>\\n        <FormHelperText>You can display an error</FormHelperText>\\n      </FormControl>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode2 = \"\\nimport React from 'react';\\nimport Checkbox from '@material-ui/core/Checkbox';\\nimport FormGroup from '@material-ui/core/FormGroup';\\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\\nimport FormControl from '@material-ui/core/FormControl';\\nimport FormLabel from '@material-ui/core/FormLabel';\\n\\nfunction FormControlLabelPosition() {\\n  const [value, setValue] = React.useState('female');\\n\\n  function handleChange(event) {\\n    setValue(event.target.value);\\n  }\\n\\n  return (\\n    <FormControl component=\\\"fieldset\\\">\\n      <FormLabel component=\\\"legend\\\">labelPlacement</FormLabel>\\n      <FormGroup aria-label=\\\"position\\\" name=\\\"position\\\" value={value} onChange={handleChange} row>\\n        <FormControlLabel\\n          value=\\\"top\\\"\\n          control={<Checkbox color=\\\"primary\\\" />}\\n          label=\\\"Top\\\"\\n          labelPlacement=\\\"top\\\"\\n        />\\n        <FormControlLabel\\n          value=\\\"start\\\"\\n          control={<Checkbox color=\\\"primary\\\" />}\\n          label=\\\"Start\\\"\\n          labelPlacement=\\\"start\\\"\\n        />\\n        <FormControlLabel\\n          value=\\\"bottom\\\"\\n          control={<Checkbox color=\\\"primary\\\" />}\\n          label=\\\"Bottom\\\"\\n          labelPlacement=\\\"bottom\\\"\\n        />\\n        <FormControlLabel\\n          value=\\\"end\\\"\\n          control={<Checkbox color=\\\"primary\\\" />}\\n          label=\\\"End\\\"\\n          labelPlacement=\\\"end\\\"\\n        />\\n      </FormGroup>\\n    </FormControl>\\n  );\\n}\\n\\nexport default FormControlLabelPosition;\\n\";\nvar jsCode3 = \"\\nimport React from 'react';\\nimport Checkbox from '@material-ui/core/Checkbox';\\n\\nexport default function Checkboxes() {\\n  const [state, setState] = React.useState({\\n    checkedA: true,\\n    checkedB: true,\\n    checkedF: true,\\n  });\\n\\n  const handleChange = name => event => {\\n    setState({ ...state, [name]: event.target.checked });\\n  };\\n\\n  return (\\n    <div>\\n      <Checkbox\\n        checked={state.checkedA}\\n        onChange={handleChange('checkedA')}\\n        value=\\\"checkedA\\\"\\n        inputProps={{\\n          'aria-label': 'primary checkbox',\\n        }}\\n      />\\n      <Checkbox\\n        checked={state.checkedB}\\n        onChange={handleChange('checkedB')}\\n        value=\\\"checkedB\\\"\\n        color=\\\"primary\\\"\\n        inputProps={{\\n          'aria-label': 'secondary checkbox',\\n        }}\\n      />\\n      <Checkbox\\n        value=\\\"checkedC\\\"\\n        inputProps={{\\n          'aria-label': 'uncontrolled-checkbox',\\n        }}\\n      />\\n      <Checkbox\\n        disabled\\n        value=\\\"checkedD\\\"\\n        inputProps={{\\n          'aria-label': 'disabled checkbox',\\n        }}\\n      />\\n      <Checkbox\\n        disabled\\n        checked\\n        value=\\\"checkedE\\\"\\n        inputProps={{\\n          'aria-label': 'disabled checked checkbox',\\n        }}\\n      />\\n      <Checkbox\\n        checked={state.checkedF}\\n        onChange={handleChange('checkedF')}\\n        value=\\\"checkedF\\\"\\n        indeterminate\\n        inputProps={{\\n          'aria-label': 'indeterminate checkbox',\\n        }}\\n      />\\n      <Checkbox\\n        defaultChecked\\n        color=\\\"default\\\"\\n        value=\\\"checkedG\\\"\\n        inputProps={{\\n          'aria-label': 'checkbox with default color',\\n        }}\\n      />\\n    </div>\\n  );\\n}\\n\";\nvar jsCode4 = \"\\nimport React from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\nimport { green } from '@material-ui/core/colors';\\nimport FormGroup from '@material-ui/core/FormGroup';\\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\\nimport Checkbox from '@material-ui/core/Checkbox';\\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\\nimport Favorite from '@material-ui/icons/Favorite';\\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\\n\\nconst GreenCheckbox = withStyles({\\n  root: {\\n    color: green[400],\\n    '&$checked': {\\n      color: green[600],\\n    },\\n  },\\n  checked: {},\\n})(props => <Checkbox color=\\\"default\\\" {...props} />);\\n\\nexport default function CheckboxLabels() {\\n  const [state, setState] = React.useState({\\n    checkedA: true,\\n    checkedB: true,\\n    checkedF: true,\\n    checkedG: true,\\n  });\\n\\n  const handleChange = name => event => {\\n    setState({ ...state, [name]: event.target.checked });\\n  };\\n\\n  return (\\n    <FormGroup row>\\n      <FormControlLabel\\n        control={\\n          <Checkbox checked={state.checkedA} onChange={handleChange('checkedA')} value=\\\"checkedA\\\" />\\n        }\\n        label=\\\"Secondary\\\"\\n      />\\n      <FormControlLabel\\n        control={\\n          <Checkbox\\n            checked={state.checkedB}\\n            onChange={handleChange('checkedB')}\\n            value=\\\"checkedB\\\"\\n            color=\\\"primary\\\"\\n          />\\n        }\\n        label=\\\"Primary\\\"\\n      />\\n      <FormControlLabel control={<Checkbox value=\\\"checkedC\\\" />} label=\\\"Uncontrolled\\\" />\\n      <FormControlLabel disabled control={<Checkbox value=\\\"checkedD\\\" />} label=\\\"Disabled\\\" />\\n      <FormControlLabel disabled control={<Checkbox checked value=\\\"checkedE\\\" />} label=\\\"Disabled\\\" />\\n      <FormControlLabel\\n        control={\\n          <Checkbox\\n            checked={state.checkedF}\\n            onChange={handleChange('checkedF')}\\n            value=\\\"checkedF\\\"\\n            indeterminate\\n          />\\n        }\\n        label=\\\"Indeterminate\\\"\\n      />\\n      <FormControlLabel\\n        control={\\n          <GreenCheckbox\\n            checked={state.checkedG}\\n            onChange={handleChange('checkedG')}\\n            value=\\\"checkedG\\\"\\n          />\\n        }\\n        label=\\\"Custom color\\\"\\n      />\\n      <FormControlLabel\\n        control={<Checkbox icon={<FavoriteBorder />} checkedIcon={<Favorite />} value=\\\"checkedH\\\" />}\\n        label=\\\"Custom icon\\\"\\n      />\\n      <FormControlLabel\\n        control={\\n          <Checkbox\\n            icon={<CheckBoxOutlineBlankIcon fontSize=\\\"small\\\" />}\\n            checkedIcon={<CheckBoxIcon fontSize=\\\"small\\\" />}\\n            value=\\\"checkedI\\\"\\n          />\\n        }\\n        label=\\\"Custom size\\\"\\n      />\\n    </FormGroup>\\n  );\\n}\\n\";","map":{"version":3,"names":["React","Checkbox","FormControlLabel","FormControl","FormLabel","FormGroup","FormHelperText","CheckBoxOutlineBlankIcon","CheckBoxIcon","Favorite","FavoriteBorder","withStyles","green","makeStyles","Notice","KTCodeExample","GreenCheckbox","root","color","checked","props","CheckboxesExamplesPage","useState","checkedA","checkedB","checkedF","checkedG","gilad","jason","antoine","state","setState","handleChange","name","event","target","useStyles","theme","display","formControl","margin","spacing","classes","handleChange3","error","filter","v","length","value","setValue","handleChange4","jsCode3","jsCode1","jsCode4","jsCode2"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/GoogleMaterialExamples/inputs/CheckboxesExamplesPage.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-restricted-imports */\r\nimport React from \"react\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  FormGroup,\r\n  FormHelperText\r\n} from \"@material-ui/core\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport Favorite from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\nimport {green} from \"@material-ui/core/colors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\r\n\r\n// Example 2\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    \"&$checked\": {\r\n      color: green[600]\r\n    }\r\n  },\r\n  checked: {}\r\n})(props => <Checkbox color=\"default\" {...props} />);\r\n\r\nexport default function CheckboxesExamplesPage() {\r\n  const [state, setState] = React.useState({\r\n    checkedA: true,\r\n    checkedB: true,\r\n    checkedF: true,\r\n    checkedG: true,\r\n    gilad: true,\r\n    jason: false,\r\n    antoine: false\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  // Example 3\r\n  const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      display: \"flex\"\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(3)\r\n    }\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  const handleChange3 = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n  const { gilad, jason, antoine } = state;\r\n  const error = [gilad, jason, antoine].filter(v => v).length !== 2;\r\n\r\n  // Example 4\r\n  const [value, setValue] = React.useState(\"female\");\r\n\r\n  function handleChange4(event) {\r\n    setValue(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning font-primary\">\r\n        <span>\r\n          Checkboxes allow the user to select one or more items from a set.\r\n        </span>{\" \"}\r\n        <code>Checkboxes</code> can be used to turn an option on or off.{\" \"}\r\n        <span>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"font-weight-bold\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/checkboxes/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </span>\r\n      </Notice>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode3}\r\n            beforeCodeTitle=\"Checkboxes\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              If you have multiple options appearing in a list, you can preserve\r\n              space by using checkboxes instead of on/off switches. If you have\r\n              a single option, avoid using a checkbox and use an on/off switch\r\n              instead.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <div>\r\n              <Checkbox\r\n                checked={state.checkedA}\r\n                onChange={handleChange(\"checkedA\")}\r\n                value=\"checkedA\"\r\n                inputProps={{\r\n                  \"aria-label\": \"primary checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                checked={state.checkedB}\r\n                onChange={handleChange(\"checkedB\")}\r\n                value=\"checkedB\"\r\n                color=\"primary\"\r\n                inputProps={{\r\n                  \"aria-label\": \"secondary checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                value=\"checkedC\"\r\n                inputProps={{\r\n                  \"aria-label\": \"uncontrolled-checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                disabled\r\n                value=\"checkedD\"\r\n                inputProps={{\r\n                  \"aria-label\": \"disabled checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                disabled\r\n                checked\r\n                value=\"checkedE\"\r\n                inputProps={{\r\n                  \"aria-label\": \"disabled checked checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                checked={state.checkedF}\r\n                onChange={handleChange(\"checkedF\")}\r\n                value=\"checkedF\"\r\n                indeterminate\r\n                inputProps={{\r\n                  \"aria-label\": \"indeterminate checkbox\"\r\n                }}\r\n              />\r\n              <Checkbox\r\n                defaultChecked\r\n                color=\"default\"\r\n                value=\"checkedG\"\r\n                inputProps={{\r\n                  \"aria-label\": \"checkbox with default color\"\r\n                }}\r\n              />\r\n            </div>\r\n          </KTCodeExample>\r\n\r\n          <KTCodeExample\r\n            jsCode={jsCode1}\r\n            beforeCodeTitle=\"Checkboxes with FormGroup\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              <code>FormGroup</code> is a helpful wrapper used to group\r\n              selection controls components that provides an easier API.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <div className={classes.root}>\r\n              <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                <FormLabel component=\"legend\">Assign responsibility</FormLabel>\r\n                <FormGroup>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={gilad}\r\n                        onChange={handleChange3(\"gilad\")}\r\n                        value=\"gilad\"\r\n                      />\r\n                    }\r\n                    label=\"Gilad Gray\"\r\n                  />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={jason}\r\n                        onChange={handleChange3(\"jason\")}\r\n                        value=\"jason\"\r\n                      />\r\n                    }\r\n                    label=\"Jason Killian\"\r\n                  />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={antoine}\r\n                        onChange={handleChange3(\"antoine\")}\r\n                        value=\"antoine\"\r\n                      />\r\n                    }\r\n                    label=\"Antoine Llorca\"\r\n                  />\r\n                </FormGroup>\r\n                <FormHelperText>Be careful</FormHelperText>\r\n              </FormControl>\r\n              <FormControl\r\n                required\r\n                error={error}\r\n                component=\"fieldset\"\r\n                className={classes.formControl}\r\n              >\r\n                <FormLabel component=\"legend\">Pick two</FormLabel>\r\n                <FormGroup>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={gilad}\r\n                        onChange={handleChange3(\"gilad\")}\r\n                        value=\"gilad\"\r\n                      />\r\n                    }\r\n                    label=\"Gilad Gray\"\r\n                  />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={jason}\r\n                        onChange={handleChange3(\"jason\")}\r\n                        value=\"jason\"\r\n                      />\r\n                    }\r\n                    label=\"Jason Killian\"\r\n                  />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={antoine}\r\n                        onChange={handleChange3(\"antoine\")}\r\n                        value=\"antoine\"\r\n                      />\r\n                    }\r\n                    label=\"Antoine Lorca\"\r\n                  />\r\n                </FormGroup>\r\n                <FormHelperText>You can display an error</FormHelperText>\r\n              </FormControl>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode4}\r\n            beforeCodeTitle=\"Form Control Label\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              <code>Checkbox</code> can also be used with a label description\r\n              thanks to the <code>FormControlLabel</code> component.\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <FormGroup row>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={state.checkedA}\r\n                    onChange={handleChange(\"checkedA\")}\r\n                    value=\"checkedA\"\r\n                  />\r\n                }\r\n                label=\"Secondary\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={state.checkedB}\r\n                    onChange={handleChange(\"checkedB\")}\r\n                    value=\"checkedB\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Primary\"\r\n              />\r\n              <FormControlLabel\r\n                control={<Checkbox value=\"checkedC\" />}\r\n                label=\"Uncontrolled\"\r\n              />\r\n              <FormControlLabel\r\n                disabled\r\n                control={<Checkbox value=\"checkedD\" />}\r\n                label=\"Disabled\"\r\n              />\r\n              <FormControlLabel\r\n                disabled\r\n                control={<Checkbox checked value=\"checkedE\" />}\r\n                label=\"Disabled\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={state.checkedF}\r\n                    onChange={handleChange(\"checkedF\")}\r\n                    value=\"checkedF\"\r\n                    indeterminate\r\n                  />\r\n                }\r\n                label=\"Indeterminate\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <GreenCheckbox\r\n                    checked={state.checkedG}\r\n                    onChange={handleChange(\"checkedG\")}\r\n                    value=\"checkedG\"\r\n                  />\r\n                }\r\n                label=\"Custom color\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    icon={<FavoriteBorder />}\r\n                    checkedIcon={<Favorite />}\r\n                    value=\"checkedH\"\r\n                  />\r\n                }\r\n                label=\"Custom icon\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n                    checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n                    value=\"checkedI\"\r\n                  />\r\n                }\r\n                label=\"Custom size\"\r\n              />\r\n            </FormGroup>\r\n          </KTCodeExample>\r\n          <KTCodeExample\r\n            jsCode={jsCode2}\r\n            beforeCodeTitle=\"Label placement\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>You can change the placement of the label:</span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <FormControl component=\"fieldset\">\r\n              <FormLabel component=\"legend\">labelPlacement</FormLabel>\r\n              <FormGroup\r\n                aria-label=\"position\"\r\n                name=\"position\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                row\r\n              >\r\n                <FormControlLabel\r\n                  value=\"top\"\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label=\"Top\"\r\n                  labelPlacement=\"top\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"start\"\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label=\"Start\"\r\n                  labelPlacement=\"start\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"bottom\"\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label=\"Bottom\"\r\n                  labelPlacement=\"bottom\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"end\"\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label=\"End\"\r\n                  labelPlacement=\"end\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </KTCodeExample>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst jsCode1 = `\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function CheckboxesGroup() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    gilad: true,\r\n    jason: false,\r\n    antoine: false,\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  const { gilad, jason, antoine } = state;\r\n  const error = [gilad, jason, antoine].filter(v => v).length !== 2;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        <FormLabel component=\"legend\">Assign responsibility</FormLabel>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={<Checkbox checked={gilad} onChange={handleChange('gilad')} value=\"gilad\" />}\r\n            label=\"Gilad Gray\"\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox checked={jason} onChange={handleChange('jason')} value=\"jason\" />}\r\n            label=\"Jason Killian\"\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox checked={antoine} onChange={handleChange('antoine')} value=\"antoine\" />\r\n            }\r\n            label=\"Antoine Llorca\"\r\n          />\r\n        </FormGroup>\r\n        <FormHelperText>Be careful</FormHelperText>\r\n      </FormControl>\r\n      <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\r\n        <FormLabel component=\"legend\">Pick two</FormLabel>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={<Checkbox checked={gilad} onChange={handleChange('gilad')} value=\"gilad\" />}\r\n            label=\"Gilad Gray\"\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox checked={jason} onChange={handleChange('jason')} value=\"jason\" />}\r\n            label=\"Jason Killian\"\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox checked={antoine} onChange={handleChange('antoine')} value=\"antoine\" />\r\n            }\r\n            label=\"Antoine Llorca\"\r\n          />\r\n        </FormGroup>\r\n        <FormHelperText>You can display an error</FormHelperText>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode2 = `\r\nimport React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nfunction FormControlLabelPosition() {\r\n  const [value, setValue] = React.useState('female');\r\n\r\n  function handleChange(event) {\r\n    setValue(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">labelPlacement</FormLabel>\r\n      <FormGroup aria-label=\"position\" name=\"position\" value={value} onChange={handleChange} row>\r\n        <FormControlLabel\r\n          value=\"top\"\r\n          control={<Checkbox color=\"primary\" />}\r\n          label=\"Top\"\r\n          labelPlacement=\"top\"\r\n        />\r\n        <FormControlLabel\r\n          value=\"start\"\r\n          control={<Checkbox color=\"primary\" />}\r\n          label=\"Start\"\r\n          labelPlacement=\"start\"\r\n        />\r\n        <FormControlLabel\r\n          value=\"bottom\"\r\n          control={<Checkbox color=\"primary\" />}\r\n          label=\"Bottom\"\r\n          labelPlacement=\"bottom\"\r\n        />\r\n        <FormControlLabel\r\n          value=\"end\"\r\n          control={<Checkbox color=\"primary\" />}\r\n          label=\"End\"\r\n          labelPlacement=\"end\"\r\n        />\r\n      </FormGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default FormControlLabelPosition;\r\n`;\r\nconst jsCode3 = `\r\nimport React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nexport default function Checkboxes() {\r\n  const [state, setState] = React.useState({\r\n    checkedA: true,\r\n    checkedB: true,\r\n    checkedF: true,\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Checkbox\r\n        checked={state.checkedA}\r\n        onChange={handleChange('checkedA')}\r\n        value=\"checkedA\"\r\n        inputProps={{\r\n          'aria-label': 'primary checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        checked={state.checkedB}\r\n        onChange={handleChange('checkedB')}\r\n        value=\"checkedB\"\r\n        color=\"primary\"\r\n        inputProps={{\r\n          'aria-label': 'secondary checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        value=\"checkedC\"\r\n        inputProps={{\r\n          'aria-label': 'uncontrolled-checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        disabled\r\n        value=\"checkedD\"\r\n        inputProps={{\r\n          'aria-label': 'disabled checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        disabled\r\n        checked\r\n        value=\"checkedE\"\r\n        inputProps={{\r\n          'aria-label': 'disabled checked checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        checked={state.checkedF}\r\n        onChange={handleChange('checkedF')}\r\n        value=\"checkedF\"\r\n        indeterminate\r\n        inputProps={{\r\n          'aria-label': 'indeterminate checkbox',\r\n        }}\r\n      />\r\n      <Checkbox\r\n        defaultChecked\r\n        color=\"default\"\r\n        value=\"checkedG\"\r\n        inputProps={{\r\n          'aria-label': 'checkbox with default color',\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode4 = `\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})(props => <Checkbox color=\"default\" {...props} />);\r\n\r\nexport default function CheckboxLabels() {\r\n  const [state, setState] = React.useState({\r\n    checkedA: true,\r\n    checkedB: true,\r\n    checkedF: true,\r\n    checkedG: true,\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox checked={state.checkedA} onChange={handleChange('checkedA')} value=\"checkedA\" />\r\n        }\r\n        label=\"Secondary\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedB}\r\n            onChange={handleChange('checkedB')}\r\n            value=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Primary\"\r\n      />\r\n      <FormControlLabel control={<Checkbox value=\"checkedC\" />} label=\"Uncontrolled\" />\r\n      <FormControlLabel disabled control={<Checkbox value=\"checkedD\" />} label=\"Disabled\" />\r\n      <FormControlLabel disabled control={<Checkbox checked value=\"checkedE\" />} label=\"Disabled\" />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedF}\r\n            onChange={handleChange('checkedF')}\r\n            value=\"checkedF\"\r\n            indeterminate\r\n          />\r\n        }\r\n        label=\"Indeterminate\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <GreenCheckbox\r\n            checked={state.checkedG}\r\n            onChange={handleChange('checkedG')}\r\n            value=\"checkedG\"\r\n          />\r\n        }\r\n        label=\"Custom color\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox icon={<FavoriteBorder />} checkedIcon={<Favorite />} value=\"checkedH\" />}\r\n        label=\"Custom icon\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n            checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n            value=\"checkedI\"\r\n          />\r\n        }\r\n        label=\"Custom size\"\r\n      />\r\n    </FormGroup>\r\n  );\r\n}\r\n`;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}