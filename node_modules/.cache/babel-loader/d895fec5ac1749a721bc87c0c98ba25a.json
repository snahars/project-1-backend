{"ast":null,"code":"import _objectSpread from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _excluded = [\"placement\", \"scheduleUpdate\", \"arrowProps\", \"outOfBoundaries\", \"show\"];\n\nvar _jsxFileName = \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/ReactBootstrapExamples/OverlaysExamplesPage.js\",\n    _this3 = this;\n\n/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport { Button, Overlay, Popover, OverlayTrigger, ButtonToolbar, Tooltip } from \"react-bootstrap\";\nimport { Notice, KTCodeExample } from \"../../../_metronic/_partials/controls\";\n\nvar Example = /*#__PURE__*/function (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  var _super = _createSuper(Example);\n\n  function Example() {\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.attachRef = function (target) {\n      return _this.setState({\n        target: target\n      });\n    };\n\n    _this.state = {\n      show: false\n    };\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          show = _this$state.show,\n          target = _this$state.target;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        ref: this.attachRef,\n        onClick: function onClick() {\n          return _this2.setState({\n            show: !show\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }\n      }, \"Click me to see\"), /*#__PURE__*/React.createElement(Overlay, {\n        target: target,\n        show: show,\n        placement: \"right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }\n      }, function (_ref) {\n        var placement = _ref.placement,\n            scheduleUpdate = _ref.scheduleUpdate,\n            arrowProps = _ref.arrowProps,\n            outOfBoundaries = _ref.outOfBoundaries,\n            _show = _ref.show,\n            props = _objectWithoutProperties(_ref, _excluded);\n\n        return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n          style: _objectSpread({\n            backgroundColor: \"rgba(255, 100, 100, 0.85)\",\n            padding: \"2px 10px\",\n            color: \"white\",\n            borderRadius: 3\n          }, props.style),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }\n        }), \"Simple tooltip\");\n      }));\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nvar renderTooltip = function renderTooltip(props) {\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n    style: _objectSpread({\n      backgroundColor: \"rgba(0, 0, 0, 0.85)\",\n      padding: \"2px 10px\",\n      color: \"white\",\n      borderRadius: 3\n    }, props.style),\n    __self: _this3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }), \"Simple tooltip\");\n};\n\nvar Example1 = function Example1() {\n  return /*#__PURE__*/React.createElement(OverlayTrigger, {\n    placement: \"right-start\",\n    delay: {\n      show: 250,\n      hide: 400\n    },\n    overlay: renderTooltip,\n    __self: _this3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"success\",\n    __self: _this3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, \"Hover me to see\"));\n};\n\nvar Example4 = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Example4, _React$Component2);\n\n  var _super2 = _createSuper(Example4);\n\n  function Example4(props, context) {\n    var _this4;\n\n    _classCallCheck(this, Example4);\n\n    _this4 = _super2.call(this, props, context);\n\n    _this4.handleClick = function (_ref2) {\n      var target = _ref2.target;\n\n      _this4.setState(function (s) {\n        return {\n          target: target,\n          show: !s.show\n        };\n      });\n    };\n\n    _this4.state = {\n      show: false\n    };\n    return _this4;\n  }\n\n  _createClass(Example4, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(ButtonToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      }, \"Holy guacamole!\"), /*#__PURE__*/React.createElement(Overlay, {\n        show: this.state.show,\n        target: this.state.target,\n        placement: \"bottom\",\n        container: this,\n        containerPadding: 20,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Popover, {\n        id: \"popover-contained\",\n        title: \"Popover bottom\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }\n      }, \"Holy guacamole!\"), \" Check this info.\")));\n    }\n  }]);\n\n  return Example4;\n}(React.Component);\n\nvar UpdatingPopover = /*#__PURE__*/function (_React$Component3) {\n  _inherits(UpdatingPopover, _React$Component3);\n\n  var _super3 = _createSuper(UpdatingPopover);\n\n  function UpdatingPopover() {\n    _classCallCheck(this, UpdatingPopover);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(UpdatingPopover, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.children !== this.props.children) {\n        this.props.scheduleUpdate();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Popover, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return UpdatingPopover;\n}(React.Component);\n\nvar longContent = \"\\n  Very long\\n  Multiline content\\n  that is engaging and what-not\\n\";\nvar shortContent = \"Short and sweet!\";\n\nvar Example5 = /*#__PURE__*/function (_React$Component4) {\n  _inherits(Example5, _React$Component4);\n\n  var _super4 = _createSuper(Example5);\n\n  function Example5(props, context) {\n    var _this5;\n\n    _classCallCheck(this, Example5);\n\n    _this5 = _super4.call(this, props, context);\n    _this5.state = {\n      content: shortContent\n    };\n    return _this5;\n  }\n\n  _createClass(Example5, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this6 = this;\n\n      this.timer = setInterval(function () {\n        _this6.setState(function (state) {\n          return {\n            content: state.content === shortContent ? longContent : shortContent\n          };\n        });\n      }, 3000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var content = this.state.content;\n      return /*#__PURE__*/React.createElement(OverlayTrigger, {\n        trigger: \"click\",\n        overlay: /*#__PURE__*/React.createElement(UpdatingPopover, {\n          id: \"popover-contained\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 11\n          }\n        }, content),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }\n      }, \"Holy guacamole!\"));\n    }\n  }]);\n\n  return Example5;\n}(React.Component);\n\nvar OverlaysExamplesPage = /*#__PURE__*/function (_React$Component5) {\n  _inherits(OverlaysExamplesPage, _React$Component5);\n\n  var _super5 = _createSuper(OverlaysExamplesPage);\n\n  function OverlaysExamplesPage() {\n    _classCallCheck(this, OverlaysExamplesPage);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(OverlaysExamplesPage, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n        icon: \"flaticon-warning font-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }\n      }, \"A set of components for positioning beautiful overlays, tooltips, popovers, and anything else you need.\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        className: \"font-weight-bold\",\n        rel: \"noopener noreferrer\",\n        href: \"https://react-bootstrap.github.io/components/overlays/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }\n      }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode1,\n        beforeCodeTitle: \"Creating an Overlay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 15\n        }\n      }, \"Overlays consist of at least two elements, the \\\"overlay\\\", the element to be positioned, as well as a \\\"target\\\", the element the overlay is positioned in relation to. You can also also have an \\\"arrow\\\" element, like the tooltips and popovers, but that is optional.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Example, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode5,\n        beforeCodeTitle: \"Disabled elements\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }\n      }, \"Elements with the \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 35\n        }\n      }, \"disabled\"), \" attribute aren\\u2019t interactive, meaning users cannot hover or click them to trigger a popover (or tooltip).\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(OverlayTrigger, {\n        overlay: /*#__PURE__*/React.createElement(Tooltip, {\n          id: \"tooltip-disabled\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 26\n          }\n        }, \"Tooltip!\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"d-inline-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        disabled: true,\n        style: {\n          pointerEvents: \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 19\n        }\n      }, \"Disabled button\")))), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode7,\n        beforeCodeTitle: \"Updating position dynamically\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }\n      }, \"Since we can't know every time your overlay changes size, to reposition it, you need to take manual action if you want to update the position of an Overlay in response to a change.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Example5, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode2,\n        beforeCodeTitle: \"OverlayTrigger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }\n      }, \"Since the above pattern is pretty common, but verbose, we've included \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 26\n        }\n      }, \"<OverlayTrigger>\"), \" component to help with common use-cases. It even has functionality to delayed show or hides, and a few different \\\"trigger\\\" events you can mix and match.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Example1, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(KTCodeExample, {\n        jsCode: jsCode6,\n        beforeCodeTitle: \"Changing containers\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }\n      }, \"You can specify a \", /*#__PURE__*/React.createElement(\"code\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 35\n        }\n      }, \"container\"), \" to control the DOM element the overlay is appended to. This is especially useful when styles conflict with your Overlay's.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"separator separator-dashed my-7\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Example4, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }]);\n\n  return OverlaysExamplesPage;\n}(React.Component);\n\nexport { OverlaysExamplesPage as default };\nvar jsCode1 = \"\\nclass Example extends React.Component {\\n  constructor(...args) {\\n    super(...args);\\n\\n    this.attachRef = target => this.setState({ target });\\n    this.state = {\\n      show: false,\\n    };\\n  }\\n\\n  render() {\\n    const { show, target } = this.state;\\n    return (\\n      <>\\n        <Button\\n          variant=\\\"danger\\\"\\n          ref={this.attachRef}\\n          onClick={() => this.setState({ show: !show })}\\n        >\\n          Click me to see\\n        </Button>\\n        <Overlay target={target} show={show} placement=\\\"right\\\">\\n          {({\\n            placement,\\n            scheduleUpdate,\\n            arrowProps,\\n            outOfBoundaries,\\n            show: _show,\\n            ...props\\n          }) => (\\n            <div\\n              {...props}\\n              style={{\\n                backgroundColor: 'rgba(255, 100, 100, 0.85)',\\n                padding: '2px 10px',\\n                color: 'white',\\n                borderRadius: 3,\\n                ...props.style,\\n              }}\\n            >\\n              Simple tooltip\\n            </div>\\n          )}\\n        </Overlay>\\n      </>\\n    );\\n  }\\n}\\n\\nrender(<Example />);\\n\";\nvar jsCode2 = \"\\nconst renderTooltip = props => (\\n  <div\\n    {...props}\\n    style={{\\n      backgroundColor: 'rgba(0, 0, 0, 0.85)',\\n      padding: '2px 10px',\\n      color: 'white',\\n      borderRadius: 3,\\n      ...props.style,\\n    }}\\n  >\\n    Simple tooltip\\n  </div>\\n);\\n\\nconst Example = () => (\\n  <OverlayTrigger\\n    placement=\\\"right-start\\\"\\n    delay={{ show: 250, hide: 400 }}\\n    overlay={renderTooltip}\\n  >\\n    <Button variant=\\\"success\\\">Hover me to see</Button>\\n  </OverlayTrigger>\\n);\\n\\nrender(<Example />);\\n\";\nvar jsCode3 = \"\\nclass Example extends React.Component {\\n  constructor(...args) {\\n    super(...args);\\n\\n    this.attachRef = target => this.setState({ target });\\n    this.state = { show: false };\\n  }\\n\\n  render() {\\n    const { show, target } = this.state;\\n    return (\\n      <>\\n        <Button\\n          ref={this.attachRef}\\n          onClick={() => this.setState({ show: !show })}\\n        >\\n          Click me!\\n        </Button>\\n        <Overlay target={target} show={show} placement=\\\"right\\\">\\n          {props => (\\n            <Tooltip id=\\\"overlay-example\\\" {...props}>\\n              My Tooltip\\n            </Tooltip>\\n          )}\\n        </Overlay>\\n      </>\\n    );\\n  }\\n}\\n\\nrender(<Example />);\\n\";\nvar jsCode4 = \"\\nconst popover = (\\n  <Popover id=\\\"popover-basic\\\" title=\\\"Popover right\\\">\\n    And here's some <strong>amazing</strong> content. It's very engaging. right?\\n  </Popover>\\n);\\n\\nconst Example = () => (\\n  <OverlayTrigger trigger=\\\"click\\\" placement=\\\"right\\\" overlay={popover}>\\n    <Button variant=\\\"success\\\">Click me to see</Button>\\n  </OverlayTrigger>\\n);\\n\\nrender(<Example />);\\n\";\nvar jsCode5 = \"\\n<OverlayTrigger overlay={<Tooltip id=\\\"tooltip-disabled\\\">Tooltip!</Tooltip>}>\\n  <span className=\\\"d-inline-block\\\">\\n    <Button disabled style={{ pointerEvents: 'none' }}>\\n      Disabled button\\n    </Button>\\n  </span>\\n</OverlayTrigger>\\n\";\nvar jsCode6 = \"\\nclass Example extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n\\n    this.handleClick = ({ target }) => {\\n      this.setState(s => ({ target, show: !s.show }));\\n    };\\n\\n    this.state = {\\n      show: false,\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <ButtonToolbar>\\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\\n\\n        <Overlay\\n          show={this.state.show}\\n          target={this.state.target}\\n          placement=\\\"bottom\\\"\\n          container={this}\\n          containerPadding={20}\\n        >\\n          <Popover id=\\\"popover-contained\\\" title=\\\"Popover bottom\\\">\\n            <strong>Holy guacamole!</strong> Check this info.\\n          </Popover>\\n        </Overlay>\\n      </ButtonToolbar>\\n    );\\n  }\\n}\\n\\nrender(<Example />);\\n\";\nvar jsCode7 = \"\\nclass UpdatingPopover extends React.Component {\\n  componentDidUpdate(prevProps) {\\n    if (prevProps.children !== this.props.children) {\\n      console.log('updating!');\\n      this.props.scheduleUpdate();\\n    }\\n  }\\n\\n  render() {\\n    return <Popover {...this.props} />;\\n  }\\n}\\n\\nconst longContent = `\\n  Very long\\n  Multiline content\\n  that is engaging and what-not\\n`;\\nconst shortContent = 'Short and sweet!';\\n\\nclass Example extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n    this.state = { content: shortContent };\\n  }\\n\\n  componentDidMount() {\\n    this.timer = setInterval(() => {\\n      this.setState(state => ({\\n        content: state.content === shortContent ? longContent : shortContent,\\n      }));\\n    }, 3000);\\n  }\\n\\n  render() {\\n    const { content } = this.state;\\n\\n    return (\\n      <OverlayTrigger\\n        trigger=\\\"click\\\"\\n        overlay={\\n          <UpdatingPopover id=\\\"popover-contained\\\">{content}</UpdatingPopover>\\n        }\\n      >\\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\\n      </OverlayTrigger>\\n    );\\n  }\\n}\\n\\nrender(<Example />);\\n\";","map":{"version":3,"names":["React","Button","Overlay","Popover","OverlayTrigger","ButtonToolbar","Tooltip","Notice","KTCodeExample","Example","args","attachRef","target","setState","state","show","placement","scheduleUpdate","arrowProps","outOfBoundaries","_show","props","backgroundColor","padding","color","borderRadius","style","Component","renderTooltip","Example1","hide","Example4","context","handleClick","s","UpdatingPopover","prevProps","children","longContent","shortContent","Example5","content","timer","setInterval","OverlaysExamplesPage","jsCode1","jsCode5","pointerEvents","jsCode7","jsCode2","jsCode6","jsCode3","jsCode4"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/ReactBootstrapExamples/OverlaysExamplesPage.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Overlay,\r\n  Popover,\r\n  OverlayTrigger,\r\n  ButtonToolbar,\r\n  Tooltip\r\n} from \"react-bootstrap\";\r\nimport {Notice, KTCodeExample} from \"../../../_metronic/_partials/controls\";\r\n\r\nclass Example extends React.Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.attachRef = target => this.setState({ target });\r\n    this.state = {\r\n      show: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { show, target } = this.state;\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"danger\"\r\n          ref={this.attachRef}\r\n          onClick={() => this.setState({ show: !show })}\r\n        >\r\n          Click me to see\r\n        </Button>\r\n        <Overlay target={target} show={show} placement=\"right\">\r\n          {({\r\n            placement,\r\n            scheduleUpdate,\r\n            arrowProps,\r\n            outOfBoundaries,\r\n            show: _show,\r\n            ...props\r\n          }) => (\r\n            <div\r\n              {...props}\r\n              style={{\r\n                backgroundColor: \"rgba(255, 100, 100, 0.85)\",\r\n                padding: \"2px 10px\",\r\n                color: \"white\",\r\n                borderRadius: 3,\r\n                ...props.style\r\n              }}\r\n            >\r\n              Simple tooltip\r\n            </div>\r\n          )}\r\n        </Overlay>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst renderTooltip = props => (\r\n  <div\r\n    {...props}\r\n    style={{\r\n      backgroundColor: \"rgba(0, 0, 0, 0.85)\",\r\n      padding: \"2px 10px\",\r\n      color: \"white\",\r\n      borderRadius: 3,\r\n      ...props.style\r\n    }}\r\n  >\r\n    Simple tooltip\r\n  </div>\r\n);\r\n\r\nconst Example1 = () => (\r\n  <OverlayTrigger\r\n    placement=\"right-start\"\r\n    delay={{ show: 250, hide: 400 }}\r\n    overlay={renderTooltip}\r\n  >\r\n    <Button variant=\"success\">Hover me to see</Button>\r\n  </OverlayTrigger>\r\n);\r\n\r\nclass Example4 extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleClick = ({ target }) => {\r\n      this.setState(s => ({ target, show: !s.show }));\r\n    };\r\n\r\n    this.state = {\r\n      show: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ButtonToolbar>\r\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\r\n\r\n        <Overlay\r\n          show={this.state.show}\r\n          target={this.state.target}\r\n          placement=\"bottom\"\r\n          container={this}\r\n          containerPadding={20}\r\n        >\r\n          <Popover id=\"popover-contained\" title=\"Popover bottom\">\r\n            <strong>Holy guacamole!</strong> Check this info.\r\n          </Popover>\r\n        </Overlay>\r\n      </ButtonToolbar>\r\n    );\r\n  }\r\n}\r\n\r\nclass UpdatingPopover extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.children !== this.props.children) {\r\n      this.props.scheduleUpdate();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Popover {...this.props} />;\r\n  }\r\n}\r\n\r\nconst longContent = `\r\n  Very long\r\n  Multiline content\r\n  that is engaging and what-not\r\n`;\r\nconst shortContent = \"Short and sweet!\";\r\n\r\nclass Example5 extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = { content: shortContent };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => {\r\n      this.setState(state => ({\r\n        content: state.content === shortContent ? longContent : shortContent\r\n      }));\r\n    }, 3000);\r\n  }\r\n\r\n  render() {\r\n    const { content } = this.state;\r\n\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\"\r\n        overlay={\r\n          <UpdatingPopover id=\"popover-contained\">{content}</UpdatingPopover>\r\n        }\r\n      >\r\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class OverlaysExamplesPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Notice icon=\"flaticon-warning font-primary\">\r\n          <span>\r\n            A set of components for positioning beautiful overlays, tooltips,\r\n            popovers, and anything else you need.\r\n          </span>{\" \"}\r\n          <span>\r\n            For more info please check the components's official{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              className=\"font-weight-bold\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://react-bootstrap.github.io/components/overlays/\"\r\n            >\r\n              demos & documentation\r\n            </a>\r\n          </span>\r\n        </Notice>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <KTCodeExample\r\n              jsCode={jsCode1}\r\n              beforeCodeTitle=\"Creating an Overlay\"\r\n            >\r\n              <span>\r\n                Overlays consist of at least two elements, the \"overlay\", the\r\n                element to be positioned, as well as a \"target\", the element the\r\n                overlay is positioned in relation to. You can also also have an\r\n                \"arrow\" element, like the tooltips and popovers, but that is\r\n                optional.\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <Example />\r\n            </KTCodeExample>\r\n\r\n            <KTCodeExample jsCode={jsCode5} beforeCodeTitle=\"Disabled elements\">\r\n              <span>\r\n                Elements with the <code>disabled</code> attribute aren’t\r\n                interactive, meaning users cannot hover or click them to trigger\r\n                a popover (or tooltip).\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <OverlayTrigger\r\n                overlay={<Tooltip id=\"tooltip-disabled\">Tooltip!</Tooltip>}\r\n              >\r\n                <span className=\"d-inline-block\">\r\n                  <Button disabled style={{ pointerEvents: \"none\" }}>\r\n                    Disabled button\r\n                  </Button>\r\n                </span>\r\n              </OverlayTrigger>\r\n            </KTCodeExample>\r\n\r\n            <KTCodeExample\r\n              jsCode={jsCode7}\r\n              beforeCodeTitle=\"Updating position dynamically\"\r\n            >\r\n              <span>\r\n                Since we can't know every time your overlay changes size, to\r\n                reposition it, you need to take manual action if you want to\r\n                update the position of an Overlay in response to a change.\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <Example5 />\r\n            </KTCodeExample>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <KTCodeExample jsCode={jsCode2} beforeCodeTitle=\"OverlayTrigger\">\r\n              <span>\r\n                Since the above pattern is pretty common, but verbose, we've\r\n                included <code>&lt;OverlayTrigger&gt;</code> component to help\r\n                with common use-cases. It even has functionality to delayed show\r\n                or hides, and a few different \"trigger\" events you can mix and\r\n                match.\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <Example1 />\r\n            </KTCodeExample>\r\n\r\n            <KTCodeExample\r\n              jsCode={jsCode6}\r\n              beforeCodeTitle=\"Changing containers\"\r\n            >\r\n              <span>\r\n                You can specify a <code>container</code> to control the DOM\r\n                element the overlay is appended to. This is especially useful\r\n                when styles conflict with your Overlay's.\r\n              </span>\r\n              <div className=\"separator separator-dashed my-7\"></div>\r\n              <Example4 />\r\n            </KTCodeExample>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst jsCode1 = `\r\nclass Example extends React.Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.attachRef = target => this.setState({ target });\r\n    this.state = {\r\n      show: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { show, target } = this.state;\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"danger\"\r\n          ref={this.attachRef}\r\n          onClick={() => this.setState({ show: !show })}\r\n        >\r\n          Click me to see\r\n        </Button>\r\n        <Overlay target={target} show={show} placement=\"right\">\r\n          {({\r\n            placement,\r\n            scheduleUpdate,\r\n            arrowProps,\r\n            outOfBoundaries,\r\n            show: _show,\r\n            ...props\r\n          }) => (\r\n            <div\r\n              {...props}\r\n              style={{\r\n                backgroundColor: 'rgba(255, 100, 100, 0.85)',\r\n                padding: '2px 10px',\r\n                color: 'white',\r\n                borderRadius: 3,\r\n                ...props.style,\r\n              }}\r\n            >\r\n              Simple tooltip\r\n            </div>\r\n          )}\r\n        </Overlay>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode2 = `\r\nconst renderTooltip = props => (\r\n  <div\r\n    {...props}\r\n    style={{\r\n      backgroundColor: 'rgba(0, 0, 0, 0.85)',\r\n      padding: '2px 10px',\r\n      color: 'white',\r\n      borderRadius: 3,\r\n      ...props.style,\r\n    }}\r\n  >\r\n    Simple tooltip\r\n  </div>\r\n);\r\n\r\nconst Example = () => (\r\n  <OverlayTrigger\r\n    placement=\"right-start\"\r\n    delay={{ show: 250, hide: 400 }}\r\n    overlay={renderTooltip}\r\n  >\r\n    <Button variant=\"success\">Hover me to see</Button>\r\n  </OverlayTrigger>\r\n);\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode3 = `\r\nclass Example extends React.Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.attachRef = target => this.setState({ target });\r\n    this.state = { show: false };\r\n  }\r\n\r\n  render() {\r\n    const { show, target } = this.state;\r\n    return (\r\n      <>\r\n        <Button\r\n          ref={this.attachRef}\r\n          onClick={() => this.setState({ show: !show })}\r\n        >\r\n          Click me!\r\n        </Button>\r\n        <Overlay target={target} show={show} placement=\"right\">\r\n          {props => (\r\n            <Tooltip id=\"overlay-example\" {...props}>\r\n              My Tooltip\r\n            </Tooltip>\r\n          )}\r\n        </Overlay>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode4 = `\r\nconst popover = (\r\n  <Popover id=\"popover-basic\" title=\"Popover right\">\r\n    And here's some <strong>amazing</strong> content. It's very engaging. right?\r\n  </Popover>\r\n);\r\n\r\nconst Example = () => (\r\n  <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n    <Button variant=\"success\">Click me to see</Button>\r\n  </OverlayTrigger>\r\n);\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode5 = `\r\n<OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Tooltip!</Tooltip>}>\r\n  <span className=\"d-inline-block\">\r\n    <Button disabled style={{ pointerEvents: 'none' }}>\r\n      Disabled button\r\n    </Button>\r\n  </span>\r\n</OverlayTrigger>\r\n`;\r\nconst jsCode6 = `\r\nclass Example extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleClick = ({ target }) => {\r\n      this.setState(s => ({ target, show: !s.show }));\r\n    };\r\n\r\n    this.state = {\r\n      show: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ButtonToolbar>\r\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\r\n\r\n        <Overlay\r\n          show={this.state.show}\r\n          target={this.state.target}\r\n          placement=\"bottom\"\r\n          container={this}\r\n          containerPadding={20}\r\n        >\r\n          <Popover id=\"popover-contained\" title=\"Popover bottom\">\r\n            <strong>Holy guacamole!</strong> Check this info.\r\n          </Popover>\r\n        </Overlay>\r\n      </ButtonToolbar>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Example />);\r\n`;\r\nconst jsCode7 = `\r\nclass UpdatingPopover extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.children !== this.props.children) {\r\n      console.log('updating!');\r\n      this.props.scheduleUpdate();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Popover {...this.props} />;\r\n  }\r\n}\r\n\r\nconst longContent = \\`\r\n  Very long\r\n  Multiline content\r\n  that is engaging and what-not\r\n\\`;\r\nconst shortContent = 'Short and sweet!';\r\n\r\nclass Example extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = { content: shortContent };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => {\r\n      this.setState(state => ({\r\n        content: state.content === shortContent ? longContent : shortContent,\r\n      }));\r\n    }, 3000);\r\n  }\r\n\r\n  render() {\r\n    const { content } = this.state;\r\n\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\"\r\n        overlay={\r\n          <UpdatingPopover id=\"popover-contained\">{content}</UpdatingPopover>\r\n        }\r\n      >\r\n        <Button onClick={this.handleClick}>Holy guacamole!</Button>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Example />);\r\n`;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}