{"ast":null,"code":"/*  removeStorage: removes a key from localStorage and its sibling expiracy key\r\n    params:\r\n        key <string>     : localStorage key to remove\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\nexport function removeStorage(key) {\n  try {\n    localStorage.setItem(key, \"\");\n    localStorage.setItem(key + \"_expiresIn\", \"\");\n  } catch (e) {\n    console.log(\"removeStorage: Error removing key [\" + key + \"] from localStorage: \" + JSON.stringify(e));\n    return false;\n  }\n\n  return true;\n}\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\r\n    params:\r\n        key <string> : localStorage key\r\n    returns:\r\n        <string> : value of localStorage key\r\n        null : in case of expired key or failure\r\n */\n\nexport function getStorage(key) {\n  var now = Date.now(); //epoch time, lets deal only with integer\n  // set expiration for storage\n\n  var expiresIn = localStorage.getItem(key + \"_expiresIn\");\n\n  if (expiresIn === undefined || expiresIn === null) {\n    expiresIn = 0;\n  }\n\n  expiresIn = Math.abs(expiresIn);\n\n  if (expiresIn < now) {\n    // Expired\n    removeStorage(key);\n    return null;\n  } else {\n    try {\n      var value = localStorage.getItem(key);\n      return value;\n    } catch (e) {\n      console.log(\"getStorage: Error reading key [\" + key + \"] from localStorage: \" + JSON.stringify(e));\n      return null;\n    }\n  }\n}\n/*  setStorage: writes a key into localStorage setting a expire time\r\n    params:\r\n        key <string>     : localStorage key\r\n        value <string>   : localStorage value\r\n        expires <number> : number of seconds from now to expire the key\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\n\nexport function setStorage(key, value, expires) {\n  if (expires === undefined || expires === null) {\n    expires = 24 * 60 * 60; // default: seconds for 1 day\n  }\n\n  var now = Date.now(); //millisecs since epoch time, lets deal only with integer\n\n  var schedule = now + expires * 1000;\n\n  try {\n    localStorage.setItem(key, value);\n    localStorage.setItem(key + \"_expiresIn\", schedule);\n  } catch (e) {\n    console.log(\"setStorage: Error setting key [\" + key + \"] in localStorage: \" + JSON.stringify(e));\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"names":["removeStorage","key","localStorage","setItem","e","console","log","JSON","stringify","getStorage","now","Date","expiresIn","getItem","undefined","Math","abs","value","setStorage","expires","schedule"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/_metronic/_helpers/LocalStorageHelpers.js"],"sourcesContent":["\r\n/*  removeStorage: removes a key from localStorage and its sibling expiracy key\r\n    params:\r\n        key <string>     : localStorage key to remove\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\r\nexport function removeStorage(key) {\r\n    try {\r\n        localStorage.setItem(key, \"\");\r\n        localStorage.setItem(key + \"_expiresIn\", \"\");\r\n    } catch (e) {\r\n        console.log(\r\n            \"removeStorage: Error removing key [\" +\r\n            key +\r\n            \"] from localStorage: \" +\r\n            JSON.stringify(e)\r\n        );\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\r\n    params:\r\n        key <string> : localStorage key\r\n    returns:\r\n        <string> : value of localStorage key\r\n        null : in case of expired key or failure\r\n */\r\nexport function getStorage(key) {\r\n    const now = Date.now(); //epoch time, lets deal only with integer\r\n    // set expiration for storage\r\n    let expiresIn = localStorage.getItem(key + \"_expiresIn\");\r\n    if (expiresIn === undefined || expiresIn === null) {\r\n        expiresIn = 0;\r\n    }\r\n\r\n    expiresIn = Math.abs(expiresIn);\r\n    if (expiresIn < now) {\r\n        // Expired\r\n        removeStorage(key);\r\n        return null;\r\n    } else {\r\n        try {\r\n            const value = localStorage.getItem(key);\r\n            return value;\r\n        } catch (e) {\r\n            console.log(\r\n                \"getStorage: Error reading key [\" +\r\n                key +\r\n                \"] from localStorage: \" +\r\n                JSON.stringify(e)\r\n            );\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n/*  setStorage: writes a key into localStorage setting a expire time\r\n    params:\r\n        key <string>     : localStorage key\r\n        value <string>   : localStorage value\r\n        expires <number> : number of seconds from now to expire the key\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\r\nexport function setStorage(key, value, expires) {\r\n    if (expires === undefined || expires === null) {\r\n        expires = 24 * 60 * 60; // default: seconds for 1 day\r\n    }\r\n\r\n    const now = Date.now(); //millisecs since epoch time, lets deal only with integer\r\n    const schedule = now + expires * 1000;\r\n    try {\r\n        localStorage.setItem(key, value);\r\n        localStorage.setItem(key + \"_expiresIn\", schedule);\r\n    } catch (e) {\r\n        console.log(\r\n            \"setStorage: Error setting key [\" +\r\n            key +\r\n            \"] in localStorage: \" +\r\n            JSON.stringify(e)\r\n        );\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;EAC/B,IAAI;IACAC,YAAY,CAACC,OAAb,CAAqBF,GAArB,EAA0B,EAA1B;IACAC,YAAY,CAACC,OAAb,CAAqBF,GAAG,GAAG,YAA3B,EAAyC,EAAzC;EACH,CAHD,CAGE,OAAOG,CAAP,EAAU;IACRC,OAAO,CAACC,GAAR,CACI,wCACAL,GADA,GAEA,uBAFA,GAGAM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAJJ;IAMA,OAAO,KAAP;EACH;;EACD,OAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,UAAT,CAAoBR,GAApB,EAAyB;EAC5B,IAAMS,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAD4B,CACJ;EACxB;;EACA,IAAIE,SAAS,GAAGV,YAAY,CAACW,OAAb,CAAqBZ,GAAG,GAAG,YAA3B,CAAhB;;EACA,IAAIW,SAAS,KAAKE,SAAd,IAA2BF,SAAS,KAAK,IAA7C,EAAmD;IAC/CA,SAAS,GAAG,CAAZ;EACH;;EAEDA,SAAS,GAAGG,IAAI,CAACC,GAAL,CAASJ,SAAT,CAAZ;;EACA,IAAIA,SAAS,GAAGF,GAAhB,EAAqB;IACjB;IACAV,aAAa,CAACC,GAAD,CAAb;IACA,OAAO,IAAP;EACH,CAJD,MAIO;IACH,IAAI;MACA,IAAMgB,KAAK,GAAGf,YAAY,CAACW,OAAb,CAAqBZ,GAArB,CAAd;MACA,OAAOgB,KAAP;IACH,CAHD,CAGE,OAAOb,CAAP,EAAU;MACRC,OAAO,CAACC,GAAR,CACI,oCACAL,GADA,GAEA,uBAFA,GAGAM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAJJ;MAMA,OAAO,IAAP;IACH;EACJ;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,UAAT,CAAoBjB,GAApB,EAAyBgB,KAAzB,EAAgCE,OAAhC,EAAyC;EAC5C,IAAIA,OAAO,KAAKL,SAAZ,IAAyBK,OAAO,KAAK,IAAzC,EAA+C;IAC3CA,OAAO,GAAG,KAAK,EAAL,GAAU,EAApB,CAD2C,CACnB;EAC3B;;EAED,IAAMT,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAL4C,CAKpB;;EACxB,IAAMU,QAAQ,GAAGV,GAAG,GAAGS,OAAO,GAAG,IAAjC;;EACA,IAAI;IACAjB,YAAY,CAACC,OAAb,CAAqBF,GAArB,EAA0BgB,KAA1B;IACAf,YAAY,CAACC,OAAb,CAAqBF,GAAG,GAAG,YAA3B,EAAyCmB,QAAzC;EACH,CAHD,CAGE,OAAOhB,CAAP,EAAU;IACRC,OAAO,CAACC,GAAR,CACI,oCACAL,GADA,GAEA,qBAFA,GAGAM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAJJ;IAMA,OAAO,KAAP;EACH;;EACD,OAAO,IAAP;AACH"},"metadata":{},"sourceType":"module"}