{"ast":null,"code":"var _jsxFileName = \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/Location/location-create/LevelSetup.js\";\nimport React from \"react\";\nimport { Field, FieldArray, Form, Formik } from \"formik\";\nimport { Input } from \"../../../../_metronic/_partials/controls\";\nimport { showError } from '../../../pages/Alert';\nexport default function LevelSetup(props) {\n  var _this = this;\n\n  var isAnyFieldEmpty = function isAnyFieldEmpty() {\n    var listOfFields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var empty = false;\n    var length = listOfFields.length;\n\n    for (var i = 0; i < length; i++) {\n      if (typeof listOfFields[i].name === \"undefined\" || listOfFields[i].name === '') {\n        empty = true;\n        showError(\"Location Type is empty at Level \" + (i + 1)); // level is start from 1 , not from 0\n\n        break;\n      }\n    }\n\n    return empty;\n  };\n\n  var isValidate = function isValidate() {\n    var listOfFields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var validate = true;\n\n    if (isAnyFieldEmpty(listOfFields)) {\n      validate = false;\n    }\n\n    return validate;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      locationsTypes: props.locationTypes\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, function (_ref) {\n    var values = _ref.values;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {\n      className: \"form form-label-right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FieldArray, {\n      name: \"locationsTypes\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 29\n      }\n    }, function (_ref2) {\n      var remove = _ref2.remove,\n          push = _ref2.push;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 37\n        }\n      }, values.locationsTypes.length > 0 && values.locationsTypes.map(function (friend, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-xl-9\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row mt-3\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-xl-3\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          className: \"mt-3\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 69\n          }\n        }, \"Level \", index + 1)), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-xl-9\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(Field, {\n          name: \"locationsTypes.\".concat(index, \".name\"),\n          type: \"text\",\n          component: Input,\n          placeholder: \"Level Name\",\n          onKeyUp: function onKeyUp() {\n            return props.setLocationTypes(values.locationsTypes);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 69\n          }\n        })))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-xl-3\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 57\n          }\n        }, index === 0 ? \"\" : /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn ml-0 btn-sm mt-5\",\n          onClick: function onClick() {\n            if (index + 1 > props.maxDepthOfLocationTree) {\n              // index start from 0. so (index + 1) is used\n              remove(index);\n              values.locationsTypes.splice(index, 1);\n            } else {\n              showError(\"This Location Type is already used in Location Tree\");\n            }\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          style: {\n            marginLeft: \"-15px\",\n            fontSize: \"16px\"\n          },\n          className: \"bi bi-trash3-fill text-danger\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 73\n          }\n        })), values.locationsTypes.length - 1 === index ? /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm mt-5\",\n          onClick: function onClick() {\n            if (!isValidate(values.locationsTypes)) {\n              return;\n            }\n\n            push({}); // add new field in formic\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"bi bi-plus-circle-fill text-primary\",\n          style: {\n            marginLeft: \"-15px\",\n            fontSize: \"16px\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 73\n          }\n        })) : \"\")));\n      }));\n    })));\n  }));\n}","map":{"version":3,"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/Location/location-create/LevelSetup.js"],"names":["React","Field","FieldArray","Form","Formik","Input","showError","LevelSetup","props","isAnyFieldEmpty","listOfFields","empty","length","i","name","isValidate","validate","locationsTypes","locationTypes","values","remove","push","map","friend","index","setLocationTypes","maxDepthOfLocationTree","splice","marginLeft","fontSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,UAAf,EAA2BC,IAA3B,EAAiCC,MAAjC,QAA8C,QAA9C;AACA,SAAQC,KAAR,QAAqB,0CAArB;AACA,SAAQC,SAAR,QAAwB,sBAAxB;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAEtC,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAuB;AAAA,QAAtBC,YAAsB,uEAAP,EAAO;AAC3C,QAAIC,KAAK,GAAG,KAAZ;AACA,QAAIC,MAAM,GAAGF,YAAY,CAACE,MAA1B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7B,UAAI,OAAQH,YAAY,CAACG,CAAD,CAAZ,CAAgBC,IAAxB,KAAkC,WAAlC,IAAiDJ,YAAY,CAACG,CAAD,CAAZ,CAAgBC,IAAhB,KAAyB,EAA9E,EAAkF;AAC9EH,QAAAA,KAAK,GAAG,IAAR;AACAL,QAAAA,SAAS,CAAC,sCAAsCO,CAAC,GAAG,CAA1C,CAAD,CAAT,CAF8E,CAErB;;AACzD;AACH;AACJ;;AACD,WAAOF,KAAP;AACH,GAXD;;AAYA,MAAMI,UAAU,GAAG,SAAbA,UAAa,GAAuB;AAAA,QAAtBL,YAAsB,uEAAP,EAAO;AACtC,QAAIM,QAAQ,GAAG,IAAf;;AACA,QAAIP,eAAe,CAACC,YAAD,CAAnB,EAAmC;AAC/BM,MAAAA,QAAQ,GAAG,KAAX;AACH;;AACD,WAAOA,QAAP;AACH,GAND;;AAOA,sBACI,uDACI,oBAAC,MAAD;AAAQ,IAAA,kBAAkB,EAAE,IAA5B;AAAkC,IAAA,aAAa,EAAE;AAC7CC,MAAAA,cAAc,EAAET,KAAK,CAACU;AADuB,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGK;AAAA,QAAEC,MAAF,QAAEA,MAAF;AAAA,wBACG,uDACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK;AAAA,UAAEC,MAAF,SAAEA,MAAF;AAAA,UAAUC,IAAV,SAAUA,IAAV;AAAA,0BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKF,MAAM,CAACF,cAAP,CAAsBL,MAAtB,GAA+B,CAA/B,IACGO,MAAM,CAACF,cAAP,CAAsBK,GAAtB,CAA0B,UAACC,MAAD,EAASC,KAAT;AAAA,4BACtB;AAAK,UAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAO,UAAA,SAAS,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA+BA,KAAK,GAAG,CAAvC,CADJ,CADJ,eAII;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,KAAD;AACI,UAAA,IAAI,2BAAoBA,KAApB,UADR;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,SAAS,EAAEnB,KAHf;AAII,UAAA,WAAW,EAAC,YAJhB;AAKI,UAAA,OAAO,EAAE;AAAA,mBAAMG,KAAK,CAACiB,gBAAN,CAAuBN,MAAM,CAACF,cAA9B,CAAN;AAAA,WALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAJJ,CADJ,CADJ,eAiBI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEQO,KAAK,KAAK,CAAV,GAAc,EAAd,gBAEI;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,SAAS,EAAC,sBAFd;AAGI,UAAA,OAAO,EAAE,mBAAM;AACX,gBAAKA,KAAK,GAAG,CAAT,GAAchB,KAAK,CAACkB,sBAAxB,EAAgD;AAAG;AAC/CN,cAAAA,MAAM,CAACI,KAAD,CAAN;AACAL,cAAAA,MAAM,CAACF,cAAP,CAAsBU,MAAtB,CAA6BH,KAA7B,EAAoC,CAApC;AACH,aAHD,MAGO;AACHlB,cAAAA,SAAS,CAAC,qDAAD,CAAT;AACH;AACJ,WAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAaI;AAAG,UAAA,KAAK,EAAE;AACNsB,YAAAA,UAAU,EAAE,OADN;AAENC,YAAAA,QAAQ,EAAE;AAFJ,WAAV;AAGG,UAAA,SAAS,EAAC,+BAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAbJ,CAJZ,EAwBQV,MAAM,CAACF,cAAP,CAAsBL,MAAtB,GAA+B,CAA/B,KAAqCY,KAArC,gBACI;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,SAAS,EAAC,iBAFd;AAGI,UAAA,OAAO,EAAE,mBAAM;AACX,gBAAI,CAACT,UAAU,CAACI,MAAM,CAACF,cAAR,CAAf,EAAwC;AACpC;AACH;;AACDI,YAAAA,IAAI,CAAC,EAAD,CAAJ,CAJW,CAIA;AACd,WARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAWI;AAAG,UAAA,SAAS,EAAC,qCAAb;AACG,UAAA,KAAK,EAAE;AACHO,YAAAA,UAAU,EAAE,OADT;AAEHC,YAAAA,QAAQ,EAAE;AAFP,WADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAXJ,CADJ,GAkBM,EA1Cd,CAjBJ,CADJ,CADsB;AAAA,OAA1B,CAFR,CADH;AAAA,KADL,CADJ,CADJ,CADH;AAAA,GAHL,CADJ,CADJ;AAyFH","sourcesContent":["import React from \"react\";\nimport {Field, FieldArray, Form, Formik} from \"formik\";\nimport {Input,} from \"../../../../_metronic/_partials/controls\";\nimport {showError} from '../../../pages/Alert';\n\nexport default function LevelSetup(props) {\n\n    const isAnyFieldEmpty = (listOfFields = []) => {\n        let empty = false;\n        let length = listOfFields.length;\n        for (let i = 0; i < length; i++) {\n            if (typeof (listOfFields[i].name) === \"undefined\" || listOfFields[i].name === '') {\n                empty = true;\n                showError(\"Location Type is empty at Level \" + (i + 1)); // level is start from 1 , not from 0\n                break;\n            }\n        }\n        return empty;\n    }\n    const isValidate = (listOfFields = []) => {\n        let validate = true;\n        if (isAnyFieldEmpty(listOfFields)) {\n            validate = false;\n        }\n        return validate;\n    }\n    return (\n        <>\n            <Formik enableReinitialize={true} initialValues={{\n                locationsTypes: props.locationTypes\n            }}>\n                {({values}) => (\n                    <>\n                        <Form className=\"form form-label-right\">\n                            <FieldArray name=\"locationsTypes\">\n                                {({remove, push}) => (\n                                    <div>\n                                        {values.locationsTypes.length > 0 &&\n                                            values.locationsTypes.map((friend, index) => (\n                                                <div key={index}>\n                                                    <div className=\"row\">\n                                                        <div className=\"col-xl-9\">\n                                                            <div className=\"row mt-3\">\n                                                                <div className=\"col-xl-3\">\n                                                                    <label className=\"mt-3\">Level {index + 1}</label>\n                                                                </div>\n                                                                <div className=\"col-xl-9\">\n                                                                    <Field\n                                                                        name={`locationsTypes.${index}.name`}\n                                                                        type=\"text\"\n                                                                        component={Input}\n                                                                        placeholder=\"Level Name\"\n                                                                        onKeyUp={() => props.setLocationTypes(values.locationsTypes)}\n                                                                    />\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                        <div className=\"col-xl-3\">\n                                                            {\n                                                                index === 0 ? \"\"\n                                                                    :\n                                                                    <button\n                                                                        type=\"button\"\n                                                                        className=\"btn ml-0 btn-sm mt-5\"\n                                                                        onClick={() => {\n                                                                            if ((index + 1) > props.maxDepthOfLocationTree) {  // index start from 0. so (index + 1) is used\n                                                                                remove(index);\n                                                                                values.locationsTypes.splice(index, 1);\n                                                                            } else {\n                                                                                showError(\"This Location Type is already used in Location Tree\");\n                                                                            }\n                                                                        }\n                                                                        }\n                                                                    >\n                                                                        <i style={{\n                                                                            marginLeft: \"-15px\",\n                                                                            fontSize: \"16px\"\n                                                                        }} className=\"bi bi-trash3-fill text-danger\"></i>\n                                                                    </button>\n                                                            }\n                                                            {\n                                                                values.locationsTypes.length - 1 === index ?\n                                                                    <button\n                                                                        type=\"button\"\n                                                                        className=\"btn btn-sm mt-5\"\n                                                                        onClick={() => {\n                                                                            if (!isValidate(values.locationsTypes)) {\n                                                                                return;\n                                                                            }\n                                                                            push({});  // add new field in formic\n                                                                        }\n                                                                        }\n                                                                    >\n                                                                        <i className=\"bi bi-plus-circle-fill text-primary\"\n                                                                           style={{\n                                                                               marginLeft: \"-15px\",\n                                                                               fontSize: \"16px\"\n                                                                           }}></i>\n                                                                    </button>\n                                                                    : \"\"\n                                                            }\n\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            ))}\n                                    </div>\n                                )}\n                            </FieldArray>\n                        </Form>\n                    </>\n                )}\n            </Formik>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}