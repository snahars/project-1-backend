{"ast":null,"code":"import _toConsumableArray from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/sunipa/projects/sncworkspace/ntl-snc_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport specificationTableMock from \"./specificationTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockSpecifications(mock) {\n  mock.onPost(\"api/specifications\").reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        specification = _JSON$parse.specification;\n\n    var carId = specification.carId,\n        _specification$value = specification.value,\n        value = _specification$value === void 0 ? \"\" : _specification$value,\n        specId = specification.specId;\n    var id = generateSpecificationId();\n    var newSpecification = {\n      id: id,\n      carId: +carId,\n      value: value,\n      specId: +specId\n    };\n    specificationTableMock.push(newSpecification);\n    return [200, {\n      specification: newSpecification\n    }];\n  });\n  mock.onPost(/api\\/specificationsfind\\/\\d+/).reply(function (config) {\n    var urls = config.url.split(\"/\");\n    var id = urls[2];\n    var mockUtils = new MockUtils();\n\n    var _JSON$parse2 = JSON.parse(config.data),\n        queryParams = _JSON$parse2.queryParams;\n\n    var specifications = specificationTableMock.filter(function (el) {\n      return el.carId === +id;\n    });\n    var result = [];\n    specifications.forEach(function (el) {\n      return result.push(wrapSpecification(el));\n    });\n    var filterdSpecifications = mockUtils.baseFilter(result, queryParams);\n    return [200, filterdSpecifications];\n  });\n  mock.onPost(\"api/specifications/deleteSpecifications\").reply(function (config) {\n    var _JSON$parse3 = JSON.parse(config.data),\n        ids = _JSON$parse3.ids;\n\n    ids.forEach(function (id) {\n      var index = specificationTableMock.findIndex(function (el) {\n        return el.id === id;\n      });\n\n      if (index > -1) {\n        specificationTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/specifications\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    var spec = specificationTableMock.find(function (el) {\n      return el.id === +id;\n    });\n\n    if (!spec) {\n      return [400];\n    }\n\n    var specification = wrapSpecification(spec);\n    return [200, specification];\n  });\n  mock.onPut(/api\\/specifications\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n\n    var _JSON$parse4 = JSON.parse(config.data),\n        specification = _JSON$parse4.specification;\n\n    var index = specificationTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n\n    if (!index) {\n      return [400];\n    }\n\n    specificationTableMock[index] = _objectSpread({}, specification);\n    return [200];\n  });\n  mock.onDelete(/api\\/specifications\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    var index = specificationTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    specificationTableMock.splice(index, 1);\n\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateSpecificationId() {\n  var ids = specificationTableMock.map(function (el) {\n    return el.id;\n  });\n  var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n  return maxId + 1;\n}\n\nfunction wrapSpecification(specification) {\n  var newSpec = _objectSpread({}, specification);\n\n  newSpec.name = getSpecNameById(newSpec.specId);\n  return newSpec;\n}\n\nfunction getSpecNameById(specId) {\n  var specs = [\"Seats\", \"Fuel Type\", \"Stock\", \"Door count\", \"Engine\", \"Transmission\", \"Drivetrain\", \"Combined MPG\", \"Warranty\", \"Wheels\"];\n  return specs[specId];\n}","map":{"version":3,"names":["specificationTableMock","MockUtils","mockSpecifications","mock","onPost","reply","data","JSON","parse","specification","carId","value","specId","id","generateSpecificationId","newSpecification","push","config","urls","url","split","mockUtils","queryParams","specifications","filter","el","result","forEach","wrapSpecification","filterdSpecifications","baseFilter","ids","index","findIndex","splice","onGet","match","spec","find","onPut","onDelete","map","maxId","Math","max","newSpec","name","getSpecNameById","specs"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/ECommerce/__mocks__/mockSpecification.js"],"sourcesContent":["import specificationTableMock from \"./specificationTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\n\r\nexport default function mockSpecifications(mock) {\r\n  mock.onPost(\"api/specifications\").reply(({ data }) => {\r\n    const { specification } = JSON.parse(data);\r\n    const { carId, value = \"\", specId } = specification;\r\n    const id = generateSpecificationId();\r\n    const newSpecification = {\r\n      id,\r\n      carId: +carId,\r\n      value,\r\n      specId: +specId\r\n    };\r\n    specificationTableMock.push(newSpecification);\r\n    return [200, { specification: newSpecification }];\r\n  });\r\n\r\n  mock.onPost(/api\\/specificationsfind\\/\\d+/).reply(config => {\r\n    const urls = config.url.split(\"/\");\r\n    const id = urls[2];\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    const specifications = specificationTableMock.filter(\r\n      el => el.carId === +id\r\n    );\r\n    const result = [];\r\n    specifications.forEach(el => result.push(wrapSpecification(el)));\r\n    const filterdSpecifications = mockUtils.baseFilter(result, queryParams);\r\n\r\n    return [200, filterdSpecifications];\r\n  });\r\n\r\n  mock.onPost(\"api/specifications/deleteSpecifications\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach(id => {\r\n      const index = specificationTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        specificationTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/specifications\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\r\n    const spec = specificationTableMock.find(el => el.id === +id);\r\n    if (!spec) {\r\n      return [400];\r\n    }\r\n\r\n    const specification = wrapSpecification(spec);\r\n\r\n    return [200, specification];\r\n  });\r\n\r\n  mock.onPut(/api\\/specifications\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\r\n    const { specification } = JSON.parse(config.data);\r\n    const index = specificationTableMock.findIndex(el => el.id === +id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    specificationTableMock[index] = { ...specification };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/specifications\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\r\n    const index = specificationTableMock.findIndex(el => el.id === +id);\r\n    specificationTableMock.splice(index, 1);\r\n    if (!index === -1) {\r\n      return [400];\r\n    }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateSpecificationId() {\r\n  const ids = specificationTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}\r\n\r\nfunction wrapSpecification(specification) {\r\n  const newSpec = { ...specification };\r\n  newSpec.name = getSpecNameById(newSpec.specId);\r\n  return newSpec;\r\n}\r\n\r\nfunction getSpecNameById(specId) {\r\n  const specs = [\r\n    \"Seats\",\r\n    \"Fuel Type\",\r\n    \"Stock\",\r\n    \"Door count\",\r\n    \"Engine\",\r\n    \"Transmission\",\r\n    \"Drivetrain\",\r\n    \"Combined MPG\",\r\n    \"Warranty\",\r\n    \"Wheels\"\r\n  ];\r\n  return specs[specId];\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}