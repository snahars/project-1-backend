{"ast":null,"code":"import * as requestFromServer from \"./remarksCrud\";\nimport { remarksSlice, callTypes } from \"./remarksSlice\";\nvar actions = remarksSlice.actions;\nexport var fetchRemarks = function fetchRemarks(queryParams, productId) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.list\n    }));\n\n    if (!productId) {\n      return dispatch(actions.remarksFetched({\n        totalCount: 0,\n        entities: null\n      }));\n    }\n\n    return requestFromServer.findRemarks(queryParams, productId).then(function (response) {\n      var _response$data = response.data,\n          totalCount = _response$data.totalCount,\n          entities = _response$data.entities;\n      dispatch(actions.remarksFetched({\n        totalCount: totalCount,\n        entities: entities\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find remarks\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.list\n      }));\n    });\n  };\n};\nexport var fetchRemark = function fetchRemark(id) {\n  return function (dispatch) {\n    if (!id) {\n      return dispatch(actions.remarkFetched({\n        remarkForEdit: undefined\n      }));\n    }\n\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.getRemarkById(id).then(function (response) {\n      var remark = response.data;\n      dispatch(actions.remarkFetched({\n        remarkForEdit: remark\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteRemark = function deleteRemark(id) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteRemark(id).then(function (response) {\n      dispatch(actions.remarkDeleted({\n        id: id\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var createRemark = function createRemark(remarkForCreation) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.createRemark(remarkForCreation).then(function (response) {\n      var remark = response.data.remark;\n      dispatch(actions.remarkCreated({\n        remark: remark\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't create remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateRemark = function updateRemark(remark) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateRemark(remark).then(function () {\n      dispatch(actions.remarkUpdated({\n        remark: remark\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteRemarks = function deleteRemarks(ids) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteRemarks(ids).then(function () {\n      console.log(\"delete return\");\n      dispatch(actions.remarksDeleted({\n        ids: ids\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete remarks\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};","map":{"version":3,"names":["requestFromServer","remarksSlice","callTypes","actions","fetchRemarks","queryParams","productId","dispatch","startCall","callType","list","remarksFetched","totalCount","entities","findRemarks","then","response","data","catch","error","clientMessage","catchError","fetchRemark","id","remarkFetched","remarkForEdit","undefined","action","getRemarkById","remark","deleteRemark","remarkDeleted","createRemark","remarkForCreation","remarkCreated","updateRemark","remarkUpdated","deleteRemarks","ids","console","log","remarksDeleted"],"sources":["/home/sunipa/projects/sncworkspace/ntl-snc_frontend/src/app/modules/ECommerce/_redux/remarks/remarksActions.js"],"sourcesContent":["import * as requestFromServer from \"./remarksCrud\";\r\nimport {remarksSlice, callTypes} from \"./remarksSlice\";\r\n\r\nconst {actions} = remarksSlice;\r\n\r\nexport const fetchRemarks = (queryParams, productId) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  if (!productId) {\r\n    return dispatch(actions.remarksFetched({ totalCount: 0, entities: null }));\r\n  }\r\n\r\n  return requestFromServer\r\n    .findRemarks(queryParams, productId)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.remarksFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find remarks\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchRemark = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(actions.remarkFetched({ remarkForEdit: undefined }));\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getRemarkById(id)\r\n    .then(response => {\r\n      const remark = response.data;\r\n      dispatch(actions.remarkFetched({ remarkForEdit: remark }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteRemark = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteRemark(id)\r\n    .then(response => {\r\n      dispatch(actions.remarkDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createRemark = remarkForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createRemark(remarkForCreation)\r\n    .then(response => {\r\n      const { remark } = response.data;\r\n      dispatch(actions.remarkCreated({ remark }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateRemark = remark => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateRemark(remark)\r\n    .then(() => {\r\n      dispatch(actions.remarkUpdated({ remark }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteRemarks = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteRemarks(ids)\r\n    .then(() => {\r\n      console.log(\"delete return\");\r\n      dispatch(actions.remarksDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete remarks\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n"],"mappings":"AAAA,OAAO,KAAKA,iBAAZ,MAAmC,eAAnC;AACA,SAAQC,YAAR,EAAsBC,SAAtB,QAAsC,gBAAtC;AAEA,IAAOC,OAAP,GAAkBF,YAAlB,CAAOE,OAAP;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,WAAD,EAAcC,SAAd;EAAA,OAA4B,UAAAC,QAAQ,EAAI;IAClEA,QAAQ,CAACJ,OAAO,CAACK,SAAR,CAAkB;MAAEC,QAAQ,EAAEP,SAAS,CAACQ;IAAtB,CAAlB,CAAD,CAAR;;IACA,IAAI,CAACJ,SAAL,EAAgB;MACd,OAAOC,QAAQ,CAACJ,OAAO,CAACQ,cAAR,CAAuB;QAAEC,UAAU,EAAE,CAAd;QAAiBC,QAAQ,EAAE;MAA3B,CAAvB,CAAD,CAAf;IACD;;IAED,OAAOb,iBAAiB,CACrBc,WADI,CACQT,WADR,EACqBC,SADrB,EAEJS,IAFI,CAEC,UAAAC,QAAQ,EAAI;MAChB,qBAAiCA,QAAQ,CAACC,IAA1C;MAAA,IAAQL,UAAR,kBAAQA,UAAR;MAAA,IAAoBC,QAApB,kBAAoBA,QAApB;MACAN,QAAQ,CAACJ,OAAO,CAACQ,cAAR,CAAuB;QAAEC,UAAU,EAAVA,UAAF;QAAcC,QAAQ,EAARA;MAAd,CAAvB,CAAD,CAAR;IACD,CALI,EAMJK,KANI,CAME,UAAAC,KAAK,EAAI;MACdA,KAAK,CAACC,aAAN,GAAsB,oBAAtB;MACAb,QAAQ,CAACJ,OAAO,CAACkB,UAAR,CAAmB;QAAEF,KAAK,EAALA,KAAF;QAASV,QAAQ,EAAEP,SAAS,CAACQ;MAA7B,CAAnB,CAAD,CAAR;IACD,CATI,CAAP;EAUD,CAhB2B;AAAA,CAArB;AAkBP,OAAO,IAAMY,WAAW,GAAG,SAAdA,WAAc,CAAAC,EAAE;EAAA,OAAI,UAAAhB,QAAQ,EAAI;IAC3C,IAAI,CAACgB,EAAL,EAAS;MACP,OAAOhB,QAAQ,CAACJ,OAAO,CAACqB,aAAR,CAAsB;QAAEC,aAAa,EAAEC;MAAjB,CAAtB,CAAD,CAAf;IACD;;IAEDnB,QAAQ,CAACJ,OAAO,CAACK,SAAR,CAAkB;MAAEC,QAAQ,EAAEP,SAAS,CAACyB;IAAtB,CAAlB,CAAD,CAAR;IACA,OAAO3B,iBAAiB,CACrB4B,aADI,CACUL,EADV,EAEJR,IAFI,CAEC,UAAAC,QAAQ,EAAI;MAChB,IAAMa,MAAM,GAAGb,QAAQ,CAACC,IAAxB;MACAV,QAAQ,CAACJ,OAAO,CAACqB,aAAR,CAAsB;QAAEC,aAAa,EAAEI;MAAjB,CAAtB,CAAD,CAAR;IACD,CALI,EAMJX,KANI,CAME,UAAAC,KAAK,EAAI;MACdA,KAAK,CAACC,aAAN,GAAsB,mBAAtB;MACAb,QAAQ,CAACJ,OAAO,CAACkB,UAAR,CAAmB;QAAEF,KAAK,EAALA,KAAF;QAASV,QAAQ,EAAEP,SAAS,CAACyB;MAA7B,CAAnB,CAAD,CAAR;IACD,CATI,CAAP;EAUD,CAhB4B;AAAA,CAAtB;AAkBP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAAAP,EAAE;EAAA,OAAI,UAAAhB,QAAQ,EAAI;IAC5CA,QAAQ,CAACJ,OAAO,CAACK,SAAR,CAAkB;MAAEC,QAAQ,EAAEP,SAAS,CAACyB;IAAtB,CAAlB,CAAD,CAAR;IACA,OAAO3B,iBAAiB,CACrB8B,YADI,CACSP,EADT,EAEJR,IAFI,CAEC,UAAAC,QAAQ,EAAI;MAChBT,QAAQ,CAACJ,OAAO,CAAC4B,aAAR,CAAsB;QAAER,EAAE,EAAFA;MAAF,CAAtB,CAAD,CAAR;IACD,CAJI,EAKJL,KALI,CAKE,UAAAC,KAAK,EAAI;MACdA,KAAK,CAACC,aAAN,GAAsB,qBAAtB;MACAb,QAAQ,CAACJ,OAAO,CAACkB,UAAR,CAAmB;QAAEF,KAAK,EAALA,KAAF;QAASV,QAAQ,EAAEP,SAAS,CAACyB;MAA7B,CAAnB,CAAD,CAAR;IACD,CARI,CAAP;EASD,CAX6B;AAAA,CAAvB;AAaP,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAAAC,iBAAiB;EAAA,OAAI,UAAA1B,QAAQ,EAAI;IAC3DA,QAAQ,CAACJ,OAAO,CAACK,SAAR,CAAkB;MAAEC,QAAQ,EAAEP,SAAS,CAACyB;IAAtB,CAAlB,CAAD,CAAR;IACA,OAAO3B,iBAAiB,CACrBgC,YADI,CACSC,iBADT,EAEJlB,IAFI,CAEC,UAAAC,QAAQ,EAAI;MAChB,IAAQa,MAAR,GAAmBb,QAAQ,CAACC,IAA5B,CAAQY,MAAR;MACAtB,QAAQ,CAACJ,OAAO,CAAC+B,aAAR,CAAsB;QAAEL,MAAM,EAANA;MAAF,CAAtB,CAAD,CAAR;IACD,CALI,EAMJX,KANI,CAME,UAAAC,KAAK,EAAI;MACdA,KAAK,CAACC,aAAN,GAAsB,qBAAtB;MACAb,QAAQ,CAACJ,OAAO,CAACkB,UAAR,CAAmB;QAAEF,KAAK,EAALA,KAAF;QAASV,QAAQ,EAAEP,SAAS,CAACyB;MAA7B,CAAnB,CAAD,CAAR;IACD,CATI,CAAP;EAUD,CAZ4C;AAAA,CAAtC;AAcP,OAAO,IAAMQ,YAAY,GAAG,SAAfA,YAAe,CAAAN,MAAM;EAAA,OAAI,UAAAtB,QAAQ,EAAI;IAChDA,QAAQ,CAACJ,OAAO,CAACK,SAAR,CAAkB;MAAEC,QAAQ,EAAEP,SAAS,CAACyB;IAAtB,CAAlB,CAAD,CAAR;IACA,OAAO3B,iBAAiB,CACrBmC,YADI,CACSN,MADT,EAEJd,IAFI,CAEC,YAAM;MACVR,QAAQ,CAACJ,OAAO,CAACiC,aAAR,CAAsB;QAAEP,MAAM,EAANA;MAAF,CAAtB,CAAD,CAAR;IACD,CAJI,EAKJX,KALI,CAKE,UAAAC,KAAK,EAAI;MACdA,KAAK,CAACC,aAAN,GAAsB,qBAAtB;MACAb,QAAQ,CAACJ,OAAO,CAACkB,UAAR,CAAmB;QAAEF,KAAK,EAALA,KAAF;QAASV,QAAQ,EAAEP,SAAS,CAACyB;MAA7B,CAAnB,CAAD,CAAR;IACD,CARI,CAAP;EASD,CAXiC;AAAA,CAA3B;AAaP,OAAO,IAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,GAAG;EAAA,OAAI,UAAA/B,QAAQ,EAAI;IAC9CA,QAAQ,CAACJ,OAAO,CAACK,SAAR,CAAkB;MAAEC,QAAQ,EAAEP,SAAS,CAACyB;IAAtB,CAAlB,CAAD,CAAR;IACA,OAAO3B,iBAAiB,CACrBqC,aADI,CACUC,GADV,EAEJvB,IAFI,CAEC,YAAM;MACVwB,OAAO,CAACC,GAAR,CAAY,eAAZ;MACAjC,QAAQ,CAACJ,OAAO,CAACsC,cAAR,CAAuB;QAAEH,GAAG,EAAHA;MAAF,CAAvB,CAAD,CAAR;IACD,CALI,EAMJpB,KANI,CAME,UAAAC,KAAK,EAAI;MACdA,KAAK,CAACC,aAAN,GAAsB,sBAAtB;MACAb,QAAQ,CAACJ,OAAO,CAACkB,UAAR,CAAmB;QAAEF,KAAK,EAALA,KAAF;QAASV,QAAQ,EAAEP,SAAS,CAACyB;MAA7B,CAAnB,CAAD,CAAR;IACD,CATI,CAAP;EAUD,CAZ+B;AAAA,CAAzB"},"metadata":{},"sourceType":"module"}